{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## WFS is a method for parsing and downloading Geographic Features to be used in analyses and graphs  \n",
    "\n",
    "In this example, we're going to look at some layers that are currently accessible on our instance of PAVICS running locally. With WFS, we can see what is available, collect the layers we want by using a query, download the results in GML, and visualize them using OGR."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by loading the libraries needed for parsing and downloading from WFS and for opening and visualizing the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "# Import WFS from owslib\n",
    "from owslib.wfs import WebFeatureService\n",
    "\n",
    "# Import ogr from osgeo in order to work with vector data\n",
    "from osgeo import ogr\n",
    "\n",
    "# Import matplotlib for visualizing the outputs\n",
    "import matplotlib.path as mpath\n",
    "import matplotlib.patches as mpatches\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import numpy as np\n",
    "import shutil"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start by making a connection to the PAVICS instance we have locally on our server, `Boreas`. Using WFS, we can very quickly see the contents, which are the layers and the workspaces they're located with (ie: TravisTest, scratchTJS). These layer names act as dictionaries for "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scratchTJS:CANVEC_hydro_waterbodies\n",
      "scratchTJS:canada_admin_boundaries\n",
      "scratchTJS:CanVec_Rivers\n",
      "scratchTJS:CanVec_WaterBodies\n",
      "scratchTJS:global_admin_boundaries\n",
      "TravisTest:Provinces_États_Global\n",
      "TravisTest:mrc_poly\n",
      "TravisTest:region_admin_poly\n",
      "scratchTJS:wshed_bound_n1\n",
      "scratchTJS:wshed_bound_n2\n",
      "scratchTJS:wshed_bound_n3\n",
      "scratchTJS:usa_admin_boundaries\n"
     ]
    }
   ],
   "source": [
    "wfs_url = 'http://boreas.ouranos.ca/geoserver/wfs'\n",
    "# connection\n",
    "wfs = WebFeatureService(wfs_url, version='2.0.0')\n",
    "\n",
    "for i in wfs.contents:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to know more about these layers, we can use the layer names as keys in a dictionary to return more information from each layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Layer ID: scratchTJS:CANVEC_hydro_waterbodies\n",
      "Title: CANVEC_hydro_waterbodies\n",
      "Boundaries: (-153.69994123236103, 10.90107974384662, -51.71947468536068, 112.88154629084697) \n",
      "\n",
      "Layer ID: scratchTJS:canada_admin_boundaries\n",
      "Title: Canada Administrative Boundaries\n",
      "Boundaries: (-141.01807315799994, 41.681435425000075, -52.61940850399992, 83.13550252400006) \n",
      "\n",
      "Layer ID: scratchTJS:CanVec_Rivers\n",
      "Title: Canada Rivers\n",
      "Boundaries: (-152.79985046399997, 40.50671574100005, -52.668701700999975, 83.09577966100005) \n",
      "\n",
      "Layer ID: scratchTJS:CanVec_WaterBodies\n",
      "Title: Canada Water Bodies\n",
      "Boundaries: (-152.70001220699996, 40.725906372000054, -52.719278747999965, 83.05670650100006) \n",
      "\n",
      "Layer ID: scratchTJS:global_admin_boundaries\n",
      "Title: Global Admin Boundaries\n",
      "Boundaries: (-180.0, -89.99892578124998, 180.00000000000003, 83.59960937500006) \n",
      "\n",
      "Layer ID: TravisTest:Provinces_États_Global\n",
      "Title: Global Province and State Boundaries\n",
      "Boundaries: (-179.99999999999997, -89.99999999999994, 179.9999998800001, 83.66549110400007) \n",
      "\n",
      "Layer ID: TravisTest:mrc_poly\n",
      "Title: Quebec MRC Boundaries\n",
      "Boundaries: (-79.99077462077396, 42.14471395386876, -56.706674288317146, 65.42881428632558) \n",
      "\n",
      "Layer ID: TravisTest:region_admin_poly\n",
      "Title: Quebec Region Admin Boundaries\n",
      "Boundaries: (-79.99077462077396, 42.14471395386876, -56.706674288317146, 65.42881428632558) \n",
      "\n",
      "Layer ID: scratchTJS:wshed_bound_n1\n",
      "Title: Quebec Watersheds - Level 1\n",
      "Boundaries: (-79.57933414172513, 44.99135772317446, -64.1588439129039, 52.31723300189569) \n",
      "\n",
      "Layer ID: scratchTJS:wshed_bound_n2\n",
      "Title: Quebec Watersheds - Level 2\n",
      "Boundaries: (-79.5378203658975, 44.99145446889615, -64.25593470795337, 52.31723300189569) \n",
      "\n",
      "Layer ID: scratchTJS:wshed_bound_n3\n",
      "Title: Quebec Watersheds - Level 3\n",
      "Boundaries: (-79.5176519288096, 44.991612094992874, -64.26988061514169, 49.250005072226095) \n",
      "\n",
      "Layer ID: scratchTJS:usa_admin_boundaries\n",
      "Title: USA Administrative Boundaries\n",
      "Boundaries: (-179.23023299999997, 17.831509000000036, -65.16882499999997, 71.437769) \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for layerID in wfs.contents.keys():\n",
    "    layer = wfs[layerID]\n",
    "    print('Layer ID:', layerID)\n",
    "    print('Title:', layer.title)\n",
    "    print('Boundaries:', layer.boundingBoxWGS84, '\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can then perform a GetFeatures call using the layer name as a target. This returns an IOstream that can be written as a GML file, a common file format for vector data served throughout the web."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File successfully downloaded!\n"
     ]
    }
   ],
   "source": [
    "layer_io = wfs.getfeature(typename='TravisTest:region_admin_poly')\n",
    "\n",
    "# We can also choose to do a bounding box subset within our GetFeature call!\n",
    "# layer_io = wfs.getfeature(typename='TravisTest:region_admin_poly', bbox=(-74.5, 45.2, -73, 46))\n",
    "\n",
    "data_file = 'output.gml'\n",
    "\n",
    "try:\n",
    "    with open(data_file, 'w', encoding=\"utf-8\") as f:\n",
    "        layer_io.seek(0)\n",
    "        shutil.copyfileobj(layer_io, f)\n",
    "        print('File successfully downloaded!')\n",
    "except:\n",
    "    print('File failed to download.')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Once the GML is downloaded, we can either open it with a GIS application or we can read the features in using OGR, a library for manipulating vector data. The following code reads the number of features within the GML and outputs the each feature's names and values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features in output.gml: 21 \n",
      "\n",
      "Layer Name: region_admin_poly\n",
      "gml_id  Value: region_admin_poly.1\n",
      "AREA  Value: 0.000753085700268\n",
      "PERIMETER  Value: 0.151935634889\n",
      "REGIO_S_  Value: 2\n",
      "REGIO_S_ID  Value: 2\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 09\n",
      "RES_NM_REG  Value: CÃ´te-Nord\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.2\n",
      "AREA  Value: 0.502880816649\n",
      "PERIMETER  Value: 8.82743384756\n",
      "REGIO_S_  Value: 3\n",
      "REGIO_S_ID  Value: 4\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 09\n",
      "RES_NM_REG  Value: CÃ´te-Nord\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.3\n",
      "AREA  Value: 0.0877979035376\n",
      "PERIMETER  Value: 2.02590211595\n",
      "REGIO_S_  Value: 4\n",
      "REGIO_S_ID  Value: 5\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 09\n",
      "RES_NM_REG  Value: CÃ´te-Nord\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.4\n",
      "AREA  Value: 13.2980065483\n",
      "PERIMETER  Value: 19.7857933261\n",
      "REGIO_S_  Value: 5\n",
      "REGIO_S_ID  Value: 6\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 02\n",
      "RES_NM_REG  Value: Saguenay - Lac-Saint-Jean\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.5\n",
      "AREA  Value: 9.4831495973\n",
      "PERIMETER  Value: 20.8678792455\n",
      "REGIO_S_  Value: 6\n",
      "REGIO_S_ID  Value: 7\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 11\n",
      "RES_NM_REG  Value: GaspÃ©sie - Ãles-de-la-Madeleine\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.6\n",
      "AREA  Value: 3.43782496715\n",
      "PERIMETER  Value: 11.2654083387\n",
      "REGIO_S_  Value: 7\n",
      "REGIO_S_ID  Value: 8\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 01\n",
      "RES_NM_REG  Value: Bas-Saint-Laurent\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.7\n",
      "AREA  Value: 7.78473054972\n",
      "PERIMETER  Value: 14.9638243153\n",
      "REGIO_S_  Value: 8\n",
      "REGIO_S_ID  Value: 9\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 08\n",
      "RES_NM_REG  Value: Abitibi-TÃ©miscamingue\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.8\n",
      "AREA  Value: 4.78751318\n",
      "PERIMETER  Value: 13.1966772377\n",
      "REGIO_S_  Value: 9\n",
      "REGIO_S_ID  Value: 10\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 04\n",
      "RES_NM_REG  Value: Mauricie\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.9\n",
      "AREA  Value: 2.49937337389\n",
      "PERIMETER  Value: 8.8181721024\n",
      "REGIO_S_  Value: 10\n",
      "REGIO_S_ID  Value: 11\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 03\n",
      "RES_NM_REG  Value: Capitale-Nationale\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.10\n",
      "AREA  Value: 3.99614361097\n",
      "PERIMETER  Value: 15.4275800018\n",
      "REGIO_S_  Value: 11\n",
      "REGIO_S_ID  Value: 12\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 07\n",
      "RES_NM_REG  Value: Outaouais\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.11\n",
      "AREA  Value: 2.64627784217\n",
      "PERIMETER  Value: 12.0473497359\n",
      "REGIO_S_  Value: 12\n",
      "REGIO_S_ID  Value: 13\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 15\n",
      "RES_NM_REG  Value: Laurentides\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.12\n",
      "AREA  Value: 1.58700910317\n",
      "PERIMETER  Value: 9.01209725043\n",
      "REGIO_S_  Value: 13\n",
      "REGIO_S_ID  Value: 14\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 14\n",
      "RES_NM_REG  Value: LanaudiÃ¨re\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.13\n",
      "AREA  Value: 1.89098805979\n",
      "PERIMETER  Value: 8.20535335219\n",
      "REGIO_S_  Value: 14\n",
      "REGIO_S_ID  Value: 15\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 12\n",
      "RES_NM_REG  Value: ChaudiÃ¨re-Appalaches\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.14\n",
      "AREA  Value: 0.844851321836\n",
      "PERIMETER  Value: 5.4045476338\n",
      "REGIO_S_  Value: 15\n",
      "REGIO_S_ID  Value: 16\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 17\n",
      "RES_NM_REG  Value: Centre-du-QuÃ©bec\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.15\n",
      "AREA  Value: 1.36183178555\n",
      "PERIMETER  Value: 7.0912987939\n",
      "REGIO_S_  Value: 16\n",
      "REGIO_S_ID  Value: 17\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 16\n",
      "RES_NM_REG  Value: MontÃ©rÃ©gie\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.16\n",
      "AREA  Value: 1.20899519668\n",
      "PERIMETER  Value: 7.28698953467\n",
      "REGIO_S_  Value: 17\n",
      "REGIO_S_ID  Value: 18\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 05\n",
      "RES_NM_REG  Value: Estrie\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.17\n",
      "AREA  Value: 0.0719384128929\n",
      "PERIMETER  Value: 1.46897572892\n",
      "REGIO_S_  Value: 18\n",
      "REGIO_S_ID  Value: 19\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 06\n",
      "RES_NM_REG  Value: MontrÃ©al\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.18\n",
      "AREA  Value: 0.0307859846863\n",
      "PERIMETER  Value: 0.931105008023\n",
      "REGIO_S_  Value: 19\n",
      "REGIO_S_ID  Value: 20\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 13\n",
      "RES_NM_REG  Value: Laval\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.19\n",
      "AREA  Value: 124.086869032\n",
      "PERIMETER  Value: 94.6754067058\n",
      "REGIO_S_  Value: 20\n",
      "REGIO_S_ID  Value: 1\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 10\n",
      "RES_NM_REG  Value: Nord-du-QuÃ©bec\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.20\n",
      "AREA  Value: 44.6092588061\n",
      "PERIMETER  Value: 55.8047912025\n",
      "REGIO_S_  Value: 21\n",
      "REGIO_S_ID  Value: 3\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 09\n",
      "RES_NM_REG  Value: CÃ´te-Nord\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n",
      "gml_id  Value: region_admin_poly.21\n",
      "AREA  Value: 3.81309426378\n",
      "PERIMETER  Value: 22.6943886103\n",
      "REGIO_S_  Value: 22\n",
      "REGIO_S_ID  Value: 2\n",
      "RES_NO_IND  Value: 50 02 0100 000\n",
      "RES_DE_IND  Value: RÃ©gion administrative\n",
      "RES_CO_REG  Value: 09\n",
      "RES_NM_REG  Value: CÃ´te-Nord\n",
      "RES_CO_REF  Value: BDGA1M\n",
      "RES_CO_VER  Value: V2016-08\n"
     ]
    }
   ],
   "source": [
    "data  = ogr.Open(data_file, 0)\n",
    "\n",
    "if data is None:\n",
    "    print(\"File failed to be read!\")\n",
    "else:\n",
    "    layer = data.GetLayer()\n",
    "    featureCount = layer.GetFeatureCount()\n",
    "    print(\"Number of features in {}: {}\".format(data_file, featureCount), '\\n')\n",
    "    \n",
    "    layerDefn = layer.GetLayerDefn()\n",
    "    \n",
    "    print('Layer Name:', layerDefn.GetName())\n",
    "    \n",
    "    for feature in layer:\n",
    "        for i in range(layerDefn.GetFieldCount()):\n",
    "            fieldname = layerDefn.GetFieldDefn(i).GetName()\n",
    "            print(fieldname, ' Value:', feature.GetField(fieldname))\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This `layer` object can also be examined with matplotlib if we want to create maps or figures within Python without a Grapgical User Interface.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAUkAAAD8CAYAAAD6+lbaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzsnXl4XFX5xz/vvTPZ9z1p1jZtCrS0\npZFFREFkR0EBFRRR2f0BKrigILIpyCagKAKyLwKyKWtZBEQEaUv3tE2X7M3W7Ovk3nt+f8xNSEvS\nTptlZpLzeZ48M/fOPfe+Mzn3e895z3veI0opNBqNRjMyRrAN0Gg0mlBGi6RGo9HsAi2SGo1Gswu0\nSGo0Gs0u0CKp0Wg0u0CLpEaj0ewCLZIajUazC7RIajQazS7QIqnRaDS7wBNsA0YiLS1NFRYWBtsM\njUYzhVm2bFmzUip9d8eFpEgWFhaydOnSYJuh0WimMCJSGchxAYmkiCQB9wHzAAV8H/ga8GXAB2wG\nvqeUahuhbAXQCdiApZQqDeSaGo1GEwoE6pO8A3hVKTUXWACUAa8D85RS+wMbgV/sovwRSqmFWiA1\nGk24sVuRFJEE4PPAXwGUUj6lVJtSaolSynIP+wDInTgzJ55VwClAlOMgQIJlkWLbFCpFPjAbWAQc\nB1wH9AbPVI1GM4kE0pKcCTQBD4jIxyJyn4jE7nTM94FXRimvgCUiskxEzhuDrePOZuA8IEspFirF\nR319nFdXx5KVK7mispKz6uo4uLGR+du3Y/f2MqO5mf8NDHAVEANkDAxQ6Dh8F3gbv99hMrkeyHYc\n4m2bBNvm0Um+vkYzHZDd5ZMUkVL8LcVDlVIfisgdQIdS6lfu51cApcDX1AgnE5EcpVSdiGTg76Jf\nrJR6d4TjzsOvWeTn5y+urAzIp7pXPANc6ThsAWJtm890dnJyczMHdnYGVN4GqiMj+SghgScyMmg3\nTdq9XkQpkmybBMPgcMOgGL8Pwhwnu23gWfw/4oNKMSDCGQ0NzOnp4Y3kZN5LSiLZsog1DL5mGNwx\nTtfVaKYiIrIsEBdgICKZBXyglCp0tw8DLldKnSAiZwEXAEcqpXoCMOpqoEspdcuujistLVUTNbq9\n2HFYbvgb0H/cuJGDAxTG3dFlGDRFRLA2JoatUVF8kJBAU0QEXaZJlOMQKUKMCH1K0aMUAkQCyYbB\nDMPgIPxd+c8DXcA6wAEOBtqB44H3AUMpint7MZXiN1u3kt/fP2RDi8fDsvh4NkRH82B2NpGOQ7bj\nsNUTkkEMGk1QGTeRdE/2b+AcpdQGV+higTeB24AvKKWaRikXCxhKqU73/evAtUqpV3d1vYkUSQHO\nqq/n4traCTn/cBSwOSqKTdHRNEZE0GaaZAwMkOb+rXcFtSoqim0RETRGROBRin7DwFQK5Z7DEgG3\n1fjDmpqAWqY+ESqiorhwzhwEONzj4UEgcQK/r0YTTgQqkoE2MS4GHhORCGAL8D3gI/yNoddFBPyt\nzQtEJAe4Tyl1PJAJPOd+7gEe351ATjSmUiyLi5uUawlQ3NdHcV/fiJ8v7O7eYbvHMGjxeEgbGCDK\nFcku08TrOETt4TIbEUoxp7eXf65ezXNpafwjNZW0qCjiHQcAj2Fwu2Fwxt58MY1mGhFQS3KymciW\nZDGQ3NHB3eXlE3L+UKbZ42FVXBy2CPdkZ1MTGYnP0DNTNdOTQFuS0+4OOcy2WZqQQL+/dTutSLMs\nvtjWxlGtrXynoYEBw+Bs/ANCGo1mZKadSP7B9Hv0HsnMDLIlweXYlhYurK3lfiDGcUi0LFIsi2eC\nbZhGE2JMu2HPOGBfy+LuGTM4q6EBbwi6GyYDr1KcXV/PtxoaKIuNpccweD05mVPT0viGbfM3c7wC\nlzSa8GbatSQBVrkhMQ9N89YkQJRSLOrq4tCODq6urOTuDRt4yjBItCxiHIcD8IcwTHagvEYTKkxL\nkTSBhY7D3TNmcFNeXrDNCSlKu7r414oV/HbLFk5tbCRn+3Z+ZdtEK0Wc43BrsA3UaCaZaTe6PZy/\nAj9wHB5ft47CYUHZmh1R+APVj1mwgGylqJuGg16aqYce3Q6As4EM4N6cnGCbEtIIfh+mqRTVWiA1\n04xpLZIAFxkGr6WksCkqKtimhDRrYmPxKDVu89A1mnBh2ovkz93X+7Ozg2pHqHPJ7NmIbkVqpiHT\nXiSr3NcvtH0qqbpmGN+pr8d2E3N8znFox59pWaOZ6ky7OMmdOdZ9Paa1Nah2hDqX1NZyUW0tT6Wn\n8+ecHJIMA5QCERIti07T5DQRvoHfz3so/rChJcC/gWXADOAzwEUjnL8MGAD2n5yvo9EEzLQVSR9Q\nqBTbRDiovT3Y5oQFBvDNpia+2dREvwimUryTlESvYbApOppHs7L4p23TY5pDWYxibJsUyyLeslgZ\nEcHDERE8BXzkONxuGJwPXGTb3GWaGEqR6jg06kB2TQgxLUXyCuAvts120+SQ9nauragItklhR6Qb\nOnbkMDfFJbW1GECvYdDo9ZLl8w0dB7A1KorT9tuPfwMYBhcqRZkId5kmh7e2cnVFBYcvWsTnHIf3\ndOINTYgw7URykeOwwjA4tq2N/6urI9un55KMF4OyFu04FIwQd1rU18cjZWWsjYlhfUwM7R4P/4yK\n4iCfj6srKohzHM6sr+eRrKzJNVyj2QXTSiT/AaxwWyhtHg9JlrXrAppxZ5+eHvbpGTmJ/Yfx8Wx1\nQ7Fsxm/ZC41mLEwrkTwWf5bgw4EP4+I4Yf58Lquu5viWFnRwS/DYEhXFrbm5fJiYiKkUF6EFUhM6\nTCuRjACGcoSbJicAvy4qorCvj/1Gad1oJp73ExL4MDGRfwGH61hMTYgxrb3jSbY/3eyAvjGDSo+7\nps9ng22IRjMC01okHzNNvmHbnDN3Lm8kJQXbnGlJt2Fwb04OfxAhItjGaDQjMK1FEhhKLnv5rFm0\n6KVXJx1LBCXCO/bUXkTiLSDScciwLBYBNwXbIE3ATHuRBLgPfwU+esECenR83qSSaNucX1fHP6aw\ny+M24EjAZxg0eTyswJ8z4DPuypWa0CYgRRCRJBH5u4isF5EyETlERFJE5HURKXdfk0cpe5Z7TLmI\nnDW+5o8PZwNLXHFcFRsbXGOmIce2tNBrGMwItiETgA1ctlPO1ij8kRb36gdyWBDof+kO4FWl1Fxg\nAf6ptpcDbyqlZgNvuts7ICIpwK+Bg4ADgV+PJqbBJg8wlKJHT4mbdPL6+9mvu5u6EEwAPRa2AjNs\nG0R4qKyM67dsAfwRFq8CC4NpnCZgduuEE5EE4PPAdwGUUj7AJyIn4Q85BHgIeJtPMo8NcgzwulKq\nxT3X6/gfok+M3fTx5QClcETI0RnKg8LRLS1sjoqCKfKQsoGZSnFgdzcPVlRw3P6fpO4Q4KtBs0yz\npwTSkpwJNAEPiMjHInKfiMQCmUqpbQDua8YIZWcA1cO2a9x9n0JEzhORpSKytKmpaY++xHjQKsKX\nHIdzS0r4b0LCpF9/uvNUejoFU8QvWQ94lKK4t5ebN28mfWCAAzo7hz5XwDVBs06zpwQikh7gAODP\nSqlFQDcjdK1HYaRaP2KfSil1j1KqVClVmp6eHuDpx5fXDYNS0+RPejmHSUUBvabJBsPgc2E8mNEE\nlAI5SlHY18ctmzcT636fezZu5JRhD/+Xg2OiZi8IRCRrgBql1Ifu9t/xi2aDiGQDuK+No5Qdvhxh\nLlC39+aOP1XAUcB84LPA+0qRqZNeTCoCLFm1CoAPwrQ1+QxQaNtsGRjgls2beWrdOnJ3qkfPuA//\nZ4GfTb6Jmr1ktyKplKoHqkWkxN11JLAOf76IwdHqs4AXRij+GnC0iCS7AzZHu/tChv1sm5rubuY2\nNpKwfTunNDZycW1tsM2atswOU5E8FSjt7GTJqlV8ob19xBtrflcXoP2R4Uag0dMXA4+JSASwBfge\nfoF9SkTOxt8gOw1AREqBC5RS5yilWkTkOuAj9zzXDg7ihAL1QJdp8uOaGha7FVgTHGz8IlIdHR2W\ngzcHOg7vJiXxTmIih4+SxLk2MpIUxwEd+hNWBCSSSqkV+N0tO3PkCMcuBc4Ztn0/cP/eGjiRDPoH\nusPwppxKWMDBixcT4Tj8KUwF5H3DIFIp7poxY0SR7DBNWrxe5uF/ON8G/NlxGACyRKgI0xb0dCA8\na+Q4cZhts19XF4fp5RuCSp8rjB6l2BJkW/aGvwCplkV2fz8PrF8/4jEJts3XGxspU4pspbgZ6DIM\n+g2DJqWY2pMyw5tpK5Jl+J/ud5WX61ySQSbOcXhjxQrOr6vjt0CWz0eqZXFliM/n3grk2zY/tm3O\naGjgibIy4nYxOv+z6mreWrGC+zZs4OgWv9fpe/iTfOi+TOgyLUXSBr6G3we2q0qtmTySbJtvNTby\n7scfc0lNDft1dfGbEHaDPAfMcRxK2tt5bs0azq6vJzqAuhTrOCzs7mZTdDQA906wnZqxM+1E8jOO\nQ4zjsEEpflhTE2xzNDsR4zgc09rKZdX+OQihGjfZAliGwTcbG0nbi2VADunoAGDzONulGX+mlUju\nb9tstm0eLivjo+XLWdjdHWyTNKOQ6/Px9Nq1fATsF4JC+azrCijq69vNkZ+wMTqa9xISqI6M5GL3\nAT1XKY4E7ZMMYaZ8AkUb+BHwiGXRaxg8W1ZG1sBAsM3SBEBRXx9/3bCBM/fZh2Mch9dCYOTbxu/P\nftk0ebisjMQA/aYrYmM5Z+5cPI6DZRjkuuKqRHgLKLFtNoWwe2E6E/xaN4E8CUQ5Dk/6fFxUW8u/\nVqzQAhlm7NPTwxPr1vFfxyHNccixLDIti3TLIsOy+DLQO4n2/BT/7KxB2wLltjz/xDNbhCjbpiEy\ncugzUYoFI5Sx8X833coMLlO6JXkufr/Ri6tX69HDMGZ2by8Pr1/PSykpxNk2cbZNtOPQ4fHwdHo6\niZGR5CnFctMkcRyvO8+y2CJCtOOg8E+f7DUMPCL8bd26PYqKuLyqirtzcpjZ20uyZfFYZiZtHg9e\npfAoxT9FaMc/Z/dn+H2Vmx0Hn2EQbdukAk+bJgeP4/fTBIaoEMzhV1paqpYuXTrm8wxW4o+WLdNh\nPlOYuogIvjJ/PlfjT146HrQAqcCPq6uZ6XaNbSDOtlnQ3T0u9WlQeB3gwMWL8ToOlgipAwOUdnZS\n3NvLUa2tvJaSwv1ZWfSZJuuAfcbh2hoQkWVKqZEmyezAlG5JnmbbPG2aQ5VRMzXJcRNJFI3T+V4G\nTnEcivr7+WZj44T1QgbrpAE8t2YNT2Rk8FRGBvG2zdtJSbyZnMwfc3PxOA6RShHlOMSGgF92ujGl\nf/Fmd6rXgYsXB9kSzWRwHv5EE4WOw217eY41wAnA7J4eHlq/ftLcNHn9/ayLiQHggOhoCk2T+wyD\nlfhnJHWZJr2GQf4k2aP5hCktkm8ZBn933x+8aBG/y8tjS1RUUG3STAwPlpUxq7ubLZ2dpHZ3cxn+\nqYL7OQ5/3U3ZYsch07KYYdssdN1PD2zYQMwkhx4NTo99ybZZD5yrFPuD9qcHmSntkxykF7gRuEEp\nBkR45+OPh5KhaqYmDV4vy+PjWRMTw5OZmUS4gyDZtk2daWLjb3W+4jj0GwY/qapiwDD8s7Gam0kI\n0pTI/yYk8MPiYhy3FzRqKn/NmAnUJzktRHKQMuBA26bLNMnw+Vjc2cn87m4+39amQ4OmMPVeL0tS\nUlgRF8e7SUmIUniVIsGy+F59PV/Zvj2gKYUTyerYWM4pKcEWIUIpThThbOD4oFo1tdEiuQvW4M8k\n/SCwzW1JZPh8lHZ28tPqauJDPLGCZu85av/9SRkY4Mc1Nczr7g6JufstHg+n77sv271e7gO+AgRn\nAZPphRbJPWAzcCn+VOsAd2/YwOKuLj0irplQ1sTE8N199sHrOEQpxe9Nk7ODbdQ0QocA7QGz8K89\nYQO5lsUFJSXEWxY/r6ri2NbWIFunmap8HB8PwOmGwRG4azZrQo4pPbq9p5jANo+HjwHDNLly5kxK\nFy9mW0REsE3TTEFKOzvJ6+vjBcvie/in0WpCDy2SI7AQaBNhsMP/5fnz+cB96ms048U+PT08t3Yt\nb65cyZyeHr4JRDsOmcAcQK/ZGRpokdwFi/GvvxKjFBfNmcMrKSnBNkkzRbmzvJwz6+s5qqWF/Vpb\nKQeWBNsoDRCgT1JEKoBO/G47SylVKiJPAoPLzCYBbUqphYGUHQe7Jw0T6BDhQMfhV0VFfLa9PeD0\nWBpNoKRZFj90lzIeEOGQ5GT+AWzEP6ioCR57MnBzhFKqeXBDKfWNwfciciuwq9W0digbbpjAMsPA\nqxRHLlzIe8uXExWCUQGaqYFXKRZ0dnKv6+LRIhlcxtzdFhEBvg48MXZzQps+dxbEcu2f1EwwP3Ez\nl2eEQBzndCdQkVTAEhFZJiLn7fTZYUCDUqp8L8qGFSYwy3G4dNYs9nxVE40mcNJ9PqJsmxjdYwk6\ngYrkoUqpA4DjgP8Tkc8P++x0dt2K3FXZIUTkPBFZKiJLm5qaAjRr8tnkpqo6ePFinTFaM2GkWRY/\nqKujwjT5Q7CNmeYEJJJKqTr3tRH/apoHAoiIB//qrKOGeI1WdoTj7lFKlSqlStPTQ3tSVocrlM+l\npQXZEs1U5T8JCfw1OxuAB4Jsy3RntyIpIrEiEj/4Hjga//RngC8B65VSI67NupuyYUs0/i9ya14e\nujOkmQh+n5tLu8dDKfBBsI2Z5gTSkswE3hORlcD/gJeUUq+6n32TnbraIpIjIi8HUDaseQYYMAw+\njosLtimaKYjtDhIuVQo93yu47DYESCm1BUZczA2l1HdH2FeHm+FpV2XDnTgg1nF4OSWFA7q6gm2O\nZgqhgIVdXVRHRZGtFIhOtRJM9IybMWCJ4NNrjmjGGRv4Z1oaBvC2rl9BR/8HxkA8/tkRGs14Uu8m\nVDkV/xxuTXDRIjkG5ouwTAeWa8aRNTExnDx/Ph7H4ehgG6MBdD7JMXEi8KHuDmnGiedTU7m+sBCP\n4zCg61XIoP8TYyAFv19SoxkP7sjNBeCLQbZDsyNaJMfAc6AHbjTjxm2bNwOwxDDYGmRbNJ+g7/Ax\n0BNsAzRTioVdXby0ahXxlsX+jkNLsA3SANonOSa+BbyBP2RDLyCvGQvbIiL48vz5O+z7KvBOcMzR\nDEOL5Bgoc1+1QGrGSvKwdd+PARYB1wfNGs1wtEjuJf8B7nAcTmrRnSLN2IlSClEKJcK/HIclIiDC\nDcE2TKN9knvL15Wi3zC4orIy2KZopghvrVzJaY2N+AwDJcK/dcLdkECL5F5gAw3AT6uq9A+oGTfi\nbZunMzKGtt8XochxOAp4GPgV6BymQUDf43vIDUCEUuT093NKCCcH1oQnV2/dyuKODr7W1ESiZVFh\nGLwBnIXfR/nNINs3HdE+yT3gUuD3wBFtbfx261b942nGnRNbWjixpYVmj4f3EhP9O5VivggKeCyo\n1k1P9H0eIPMdhzWGwU+rqjitqUk3wTUTSqvXS2NEBIZS3CPC2cE2aBqj7/XdUAWkWxZVjsN969fz\nDS2QmkmgsK8PUykcEc4JtjHTHH2/74YipZjV3c3za9awsLs72OZopglepbhr48ah7d4g2jLd0SI5\nCg8CkY6DI8KtmzeTYOtxRc3kUtTXN/Re177goX2SO1EPfNGyKPN4OL2pifPr6ojSax9rgkBZTIz/\njVLE6WxTQUOLpMt/gEuANY7DzP5+HiwvZ16PTmExnXDcv1C5KTZFRwP+7p4AHrdnk+g4tJh6Muxk\nobvbwHdsm8OUwurq4qqKCh5Zv14L5DTk7JISDl68mGfT0ugMARH6bkMDHyxbxln19QBYhoEjQq9u\nVU4qAYmkiFSIyGoRWSEiS919V4tIrbtvhYgcP0rZY0Vkg4hsEpHLx9P4sbAZ+DIQb1k8ahj8ZutW\n7t+wgWNbW9FVcHpyUEcHAL8tKOCIhQv5XV5e0H2Ba2NjeSA7e4d9vTqH6aSyJ7/2EUqphUqp0mH7\nfu/uW6iUennnAiJiAncBxwH7AqeLyL5jM3lsHId/QKZEKWo7O7mgro73P/6Yo1tbg2mWJgQ4b9u2\nofdfB57OyOCG/Hx8QWy57d/dzZUVFUPbs/QA4qQz0e6XA4FN7vrbiMjfgJOAdRN83R3wAbcCN9o2\nHabJpbW1HNPSQqplTaYZmiDTZRgcvmgRhlLEWxbPrF1L0jDRGZ5O4nHgQuCklBSWx8dzZ3k5uT7f\nZJuMAP9LSABgC1AUAm6A6UagIqmAJSKigL8ope5x918kIt8BlgKXKaV2bo7NAKqHbdcAB43F4EDZ\niH8g5n3Loss0SbBtjm5p4Xv19WQOy92nmXzOmDuXqqgovJMcNeAAMbaNY5q0e70cu//+JFvWiO6V\nCMfBNgxaTJN9gJPnzyd9J5HcXfty+Lfbm7boYPkmd4nZE5jk1oUGCFwkD1VK1YlIBvC6iKwH/gxc\nh/9/eR3+xtr3dyo3Ut0Y8c4QkfOA8wDy8/MDNGtHbgV+Z1l0i9BrGKQPDHBZbS2HdHToVmMIURMV\nxVWVlczunfwQ6Xuys3k9JYVox6EfvwB9u76exZ2dALyanMxraWk4rt/PBDaaJsInYjWc35eXj3id\nmshIbt2pHp9RX89n3OvsjvcSE3lmWEYggGcDKqkZbwISSaVUnfvaKCLPAQcqpd4d/FxE7gVeHKFo\nDZA3bDsXqBvlGvcA9wCUlpbusolh4x94uQt4G9hmWfQBnR4PB3d3c2pTE4u7uojX/puQxKMURX19\nOwRLTxY3bN3K6Y2NfH/uXPIch2rgyYwM/peQwKLOThJGyeE4WCEfA+4D3sXfMu3weDjBTbx8RWEh\nr6WmDpWJtG1qTJP1wGHA41lZPJmZyYfLl6OAN5OSEGB2by/5/f1D5Xwi/Hj2bADmAWvwDx7MHb+f\nQbMH7FYkRSQWMJRSne77o4FrRSRbKTXo6f4q/v/lznwEzBaRIqAWf6anM/bGUBs4FXjfcehQigHD\nIKe/nwVdXRzd08PMvj7m9PTs4GPSaEZi/+5u/rJhA+eXlBBv22SbJpujoqiIihpa/VKUghEGbL7l\n/oG/m3RdQQE35ueT7fOxxY1rBIgHOlz/4efwL/Wxj1LYIlxcXMx/3Qw/hjs/+4DOTk7Yvp2Ttm+n\nIipq6DyVjNL10kwagbQkM4HnxF9hPMDjSqlXReQREVmI/39YAZwPICI5wH1KqeOVUpaIXAS8hr/n\ncr9Sau2eGnkv/n64x3E4qbmZ41pa9DxqzZiY0d/PAZ2dLI+Px1IKyxXHKMCnFMcHMKKtAMMwEMcZ\nEkiDkacQzgViROgB/puYOCSOtggeYHlcHMvj43k6PZ0f1dRwaXU1t+Xl0QkcAfxrPL60Zq/YrUi6\nI9MLRth/5ijH1wHHD9t+GfhUeNCeMN9/IrxK8YX2di2Qmr2idPFiRClu2LKFy2fNAuCPjsP5w+IO\n+2DEFuRoOAABxi3uUGuHXcNyt8W22RgTww/mzMER8bdmgW4dPB5UQmUG1i45GFAinARcMns2L6xe\nzYwghGNowo/XkpO5YubMoW0lMiSQ+ynF/4VQYLbaObxHi2NIEDo1JABeME1QigezsoJtiiYMcGBI\nIEuA3+L3C9UCfwBWaRHSBEBYiSTAQUrxXHp60KeLaUIfA39cJPhHpH8BFAA5wEWEYeXXBIWwqydf\nd7tHTV5vkC3RhAPvrFgBwGE63Z1mLwk7kfwhMNu2+ea++7JpWKiERrMz9V4vJ86f79/QXWvNXhJ2\nIjk4A+IQw+C8khI2DotN02iGsyQlhYaICE5mx7mxGs2eEHYiOcgSw+BQw+DskhI+iI8PtjmaEGQw\nJ+TLjsMzQbZFE76ErUgCvGwYXGCaXDRnDpt111uzE/9XV8eSlStJGxjgR8B32THTj0YTCGEtkgC3\nua9PpacH1Q5NaJJiWfxjjX/G7EPA+8E1RxOGhL1I1ruves62JhAOA64PthGasCLsRbLKfe3To5ea\nXbB02TIeLCsD4Cql0CsYaQIl7EXyQKDEcfjQzd6s0YzGvJ4enli3DiVCLBCrFIcpxbloX6VmdMJe\nJG1gg2FwqLuIk0azK2b39vLiqlWcW1fHUc3NeNrauA9/aNmqYBunCUnCIsHFrjCBNKV4KCuLV1JS\neH7NGiL07ArNLsgaGOD8YYt+XVlYyKupqZzoOFSFUMILTWgwJWpEk5tWqnGE9Poaza5QwKtuNvF/\na4HUjMCUqRWDwzYtnrBvHGsmgcG5/wJk9/cT7TgUBNckTYgyZRTlnyKcAFh6lFuzCyzg97m5PJmZ\nCUCCZdGhH6yaXTBlWpI/AYp6e8nSyXg1u+DVlBSezMzkeuBYGBLI1BH82Oc4DgWOw2OTa6ImxJgy\nIrkY2BodrVuSml3yxbY2AK4EzgY6gU1A87B68wKwWCn+ahhUGQbfBv4x+aYO0Yd/GdEfKEXTbo4t\nx79WSht6AbHxYsqI5GZ3KdDvzdULb4YywY5HjBm2ZOwSYJHj8PpOy8ieDCwXYWZvLxfU1gJwilJB\nsb0DSHQczgf+LEIG7jo8I6CAOcAJQDL+m3vkVcE1e8KUEcn3DYNOoDwmhh49ShmStHo8fH7hQmyR\noGaWf7isjK81NXEvsMkwuNAweBH/WsnJbrf79IYGnlq3jrtnzAAm13nv4M+b+lMgEf863ADPuXPQ\no4FH8Q86fctx+IlSfMVxOH7Y1Nxcd03zD/EvS1sJ/An/0hWaPSMgNRGRChFZLSIrRGSpu+9mEVkv\nIqtE5DkRSQq07EQR577+V8++CTls4Gv77YfPMIhwHPqC+CDbt6eHX1ZV8d7y5ZzvthS/DLwOtIkQ\na9uc3tgIwO3l/rbYN0QmtEXh4F+DW/DH/t4J/MWyADjUdRH8bOZMrt+yBYAzgRObm+lqaeF5nw9a\nWjikqorPtbczq7eXv27YwFGtrZzvOBQChcAVlsVsx+Gzts2SCfwuAL3AO8D6vSzfDXzBcbhUKWrG\nz6y9QlQAgdciUgGUKqWah+07GnjLXVv7dwBKqZ8HUnZ3lJaWqqVL905PvwB87GZ+iddJL0KG7R4P\nxyxYQHFPDy0eDzdt2RJSSwMPBpQD/Gf5ciKVotXj4agFn6ymPJE+vp8CtwBXVFTQbxi8nJJCl8dD\nvwj9hkGnx4PttihfW7mSJq8tth8BAAAgAElEQVSXkt5edueBV0C/Wy5CKSwRHsjK4t6cHM50HM4w\nDI4dx++hgJXAomH7jnQcThLhZaWYJUI/cO8uxg5OUop/uJ+ftH07L6SmcoFS3DXODyoRWaaUKt3d\ncXvdi1BKDX8YfQCcurfnGk/eApJEuCkvjyPa2ti/q4s094msCR71bqB/ps9Hi9eLCrEBtusrKri+\nomKHffHD6s0Cxwl4fe294Rb39a4ZMxAgbWCA79TXk2xZpFgWqQMDOECyZRHrOKQGWKcFiBrWEIpQ\nivO3beNLra28m5TEcTNmkOY4zHccik2Ty0VYCcwEFox20lFYCSxSauh/e1pTE9+qr+fk+fN5E9i/\nuxtPfz8vpqbyoeMwH8gW4TcitODvCeYrRZtb/v3ly4lQisSBAe7OyuJuYA2wH7ACmAFMRoLEQFuS\nW4FW/A+Kvyil7tnp838CTyqlHt3TssOOOw84DyA/P39xZWXlHn6VT7geuMOyaDMMZvX28tj6vW30\na8aLtxMT+UlxMbds2sQNBQXcsGULB3R1Bdus3fK5hQvpM80JHyl+GzjCfX9MSwu/rKwk1pn4oSIH\n2BIVRU1kJD8pLh7aH+s4LFCK802TM2GHFmstcLVSeJQiWoRe4D3HYc1O64Y/tm4dJb29WEBTRATZ\nbnhes8fDO0lJbI2OpiwujnXR0QwMe2jO7u3liXXrdjiXAk7fd182RUdzJ3CJu78OyN7L7z7eLclD\nlVJ1IpIBvC4i65VS77oXugJ/jO5o4WSjlh2OK573gL+7HaBdI3IlcKXHwz6Ow6boaPpEdniaaiaP\nAREqoqL8N6BSHN7ezg1h8r94PCODPvfGd5jYUc6Zw96/lpKCA1xcW0uGzzehg0YGUNzXR3FfH8+v\nXk2Wez2fCI9nZHBuTg73AicZBgXAQcAJjsMaw+DcbdvoUwoT+F5vL4s7O2nzeLg/J4f6iAhSBwYA\nv8hkD4tfTrMsTmn+xPtWGRlJq8dDkmVRHRVFdn//p+wU4Il163g0M5NLZ8wg2bZp9Xh4Cv8g10QS\n0O+vlKpzXxtF5Dn8GcreFZGzgBOBI9UoTdLRyo6H8bvjIcPgIGBdbGxYtFrCmT4R/p6eTozj0C/C\n/xISWBUXR687UJPZ38+vxtA7CAa35eUNvTfxjw5fGEC5t4BzleJeEb4YwPHNMDQl8uZNm7iuoIDX\nU1J4PSUF8OfCnAxyhwlZhFJ8t6GBk7Zv56WUFB5NSSFOKZbFxAwNus3u7R2KOx0kzufjqp3cFruj\noL+fAlcYC0cQyEEEOLOhgTMbGgB4JzGRHxUX86Ztc7dpkrNHVw2c3YqkiMQChlKq031/NHCtiBwL\n/Bz4glJqxBymo5UdP/N3zcXu60ItkBPGG0lJPJSVxZboaBxgwDBI9fk4uKODH1dXk+nz8Zmdf/8Q\n80eOxlebmnhu2LIgPwButm02meaIrcprgZsdhy7DABGOV4oqN7YxEL7e2MgR7e0csWoVDnDs/Pm0\nRESwbVhXdbJJtiy+3djIt93R/g7TpMXjIcZxyHBbisHiC+3tvLFiBbfm51OQnMy/RPjcBFwnkJZk\nJvCc+Cu2B3hcKfWqiGwCIvF3oQE+UEpdICI5wH1KqeNHKzsB3+NT+ICtSlHU1zd1gkFDjL+npfG7\n/HyOaWnhispK5rr+p0AqVTjI5BVVVbR7PLyVnEysZXFdRQWXFhfzJaAGqHccTBFylOIVw+DXAIbB\nK6tW0eD18t199iETyLFt/mSanDTKdZ53X19KTeVn1f7Fbw3gp9XVXDlzJvdnZXFFVdUopSeXBNsm\nIYSiRpJsm2u3biW3r49TsrJ43zDYhD/K5XkgFn9411jYbX1WSm1hhIEupVTxCIcPdq+P31XZiaYe\nyFUKW4Q/b9482ZefFjyQmcldubn8vLKS04b5l6ZaqojfbdnChuhocnw+4m2b4p4e/hUTA8Di7m5a\nPR7WRUcPdZc/XLYME0gfGOBnlZUk2jaboqM5OTub2bbN+p1aoR3Aue77q4d1U/+dkMAvZs0C4Ln0\ndE5r2t2ExOnNEW1t3JuTw0ii9CpwzBjOPaXqdBlwsG3TL0Ks4/CCjpWcEFo8Hu7KzSXd5+OrzQGH\nv4YlAszt7R3a/ltZGW2mSZxt48E/oHPg4sV8vq2NX1RVMXx89+vub3NMaysHdnZy4Zw53ARcPuyY\nrGHvP9fePvT+kI4Osvr7qY+MBODCOXPG+ZtNPeIsi273f9NjmkNxpb9wHI4ZQ/jWlBLJo5VClOLm\nLVs4pKMjLLp04USD10tDRAS35+aS6vPxyurVwTYpKAxfmdMgsIGVz3R2ckFtLb+YMQMbuMLdnwz4\nlOKZNWvwDhv79AAvutMQNXvO02lp/K6ggG8DN48xvnXKiOQcx6FOhPvLy5nXo9fCG2+qIyP56rx5\nRNs2CZbFXeU6dcKeUuTOp44btu8a4FwRaiIjdxhd1oyNKDfG9Ap2bK3vDWErkg/iz+LyiLu9FXBE\nyAzyiNtU5Y2kJCIch3dWrBjzQFh4REmOPynuLJkfAVHA6fjnKAP8JSeHgzdsCJJlU4+8/n5SLYu5\n45BQOewGfl8Ekm2b8xyHJ/DHc5nAWsMg0nE4ad48NkRHB9nKqcequDiSBwbGrcIYYRJQPp4s6uri\nv8uXA3ABkOE4/AjI7+vj9k2bgmrbVGTc6uo4nWfS+K5tkzAwwBsrV/KH8nIcEdIti286Ds2GwUzg\nTzkTFVY6vWkfp2UOpp88foJXKd75+GPm9PRwekMDb65YwbNr15KoBxhDlrDrbnuU4oyGBmIdh4M7\nOvjjxo3UREbyj7Q00qOiGDAMmt0QDc348K+kJN5LTOSzw0Zfx4IwvYUy1nF4vKws2GZoAiTsRHI4\nAhzc2QmdnZzS3MzamBhavF7StF9yXFgaF8efc3JYExfHWfX1XFRXF2yTNJpJJ+xEcrSwHgE9qj2O\nvJGUxOWzZoFSLOzq4jwtkJppStiJpGbiqYiM5PJZs5jZ08OtmzeTp0NTNGHE1qgoXnOTg4wHWiQ1\nO/D3tDRuLPBPsnu4rIyoINuj0ewOBWyMjuaN5GReSUmhw+OhBPjLTvkt9xYtkhrAP73uprw8/p6R\nwTcbGvhRTY2uHJqQZktUFC+kpfFqSgp9hsG+wPWmyVmMr7Dp+0ADwNWFhbycmorXcfhJzQQvvTQN\nYyQ148v7CQn8fOZMDhDhD4bBN5i4eEYtktMIBWyLiCDCcTCBn8+cyfVbt/LLoiJWxMdz06ZNfHGc\nwnx2SZjkk9SEJm8kJXF1YSG3mybnT8L1tEhOcT6Oi/MvAaAUl82axfrYWABy+vupi4zkB7NnUxMZ\nyR82buSQzs7JMUq3JDV7yXOpqdyWl8dDpsnXJ+maWiSnKL2GwSXFxXwcHw9AgmUhSvHuxx9z2cyZ\nVERHD6WWumnLlskTSNAtSc1e8XBGBvfl5PCCaXLUJF5Xi+QUxAGuKixkY3Q096xfz5UzZ9IvwpPr\n1hHjOPxZzxPWhBEKuCsnh79nZPCWaXLQJF9fi+QU5Mn0dN5OSuKRsjLm9vby8jTN+6gJfxT+qIsl\nqan8zzTZJwg2aJGcIgyun9xvGNw1YwY/qq7eIaN2SKF9kpoAcIDrCwp4LzmZlaY5tETGZKNFcorw\nQloav3GDwOd0d/OtUF4TRfskNbvBAq4qKmJ5YiKrJ3C52EAIKLRIRCpEZLWIrBCRpe6+FBF5XUTK\n3dfkUcqe5R5T7q7TrRlnmj0enk1LI96y+NPGjdy/fn2wTdJo9hoLf3jaysREyoIskLBn8ZdHKKUW\nKqVK3e3LgTeVUrOBN9lxfSPAL6TAr4GDgAOBX48mppq94/2EBI5dsIDN0dE8v3o1B3Z2hsVUQqVb\nk5oR6BfhR8XFbIqPZ71pkhZsgxhbkPpJwEPu+4eAk0c45hjgdaVUi1KqFXgdOHYM19TsxMdxcSQN\nDPDqypUkuut6hDpaHjUj0SfCxbNnsy0ujvUeD0nBNsglUJFUwBIRWSYi57n7MpVS2wDc14wRys0A\nqodt17j7NONAg9fLC2lpFPf2khAmAqnRjESPYXDhnDl0xMSw3jR3WCwt2AQ6cHOoUqpORDKA10Uk\nUKfXSI2GEYc2XfE9DyA/Pz/A009vri4sRJTi9nBbuVAptKRrBukyDC6YMweJiqLMNENuNDmglqRS\nqs59bQSew+9fbBCRbAD3tXGEojVA3rDtXGDE7K1KqXuUUqVKqdL09PTAv8E05an0dD5KSOCJMExn\nJvhXttRoGrxezi0pwRMVxaoQFEgIQCRFJFZE4gffA0cDa4B/AIOj1WcBL4xQ/DXgaBFJdgdsjnb3\nafYSB/8E/5vz8rhl06ahZUrDCVuE2oiIYJsxJhR+H1qHadJpmvi06O8xryYnc9p++1EQGcnKEBVI\nCKy7nQk8J/5K4AEeV0q9KiIfAU+JyNlAFXAagIiUAhcopc5RSrWIyHXAR+65rlVKtYz7t5gm9BgG\n1xYU8G5SEp9tb+fwycjYMwGkDAxghZGodJgm/4uPZ1l8PGtiY6mNjKTLNBE+WRrXFkGUIt62SR8Y\noKivj316eijp6WHf7m7itM94iHbT5PqCApYmJPAX0+TbwTZoN+xWJJVSW4AFI+zfDhw5wv6lwDnD\ntu8H7h+bmRqARzMz+XdiIg+UlVHS1xdsc6Y0Cn941WOZmXzsrjk+q7eXI9raWNTZyeze3k8JX5th\nsCk6mg0xMayPjeWV5GQeycykwzTJ9vn4QlsbR7a1Ma+7e9qO8H8QH88VM2cyU4QK02T8FlmYOEK1\nhasZRrPHw5MZGTyQnc0NmzdrgZxgVsXGcn1BAU1eL59vbeUfW7eSHoBbI8lxKO3uprS7G4bNeOoy\nDF5JSeGV1FSeT0vDBL7c3MzXmpvJ7++fwG8SOvSJcHtuLi+lpnKVaX46qDqE0SIZBlw4Zw5bo6NZ\n0NnJUW1twTZnzAihGUzeaZr8PjeXJcnJnLB9Oz+trh6XGyTOcTituZnTmpsB+FdiIg9kZfF0RgYl\nPT18f9s2PtvRMWGZtYPNupgYfj5zJlGmyVrTpCjYBu0hWiRDHAvYGh3NyU1NXFlVFWxzxgUFSAgl\nubCBf6SmckduLpk+H0+vW0f2BK4QeUR7O0e0t9NlGNw5YwZXFRURa9tcUlvLl1pbp0xX3ALuz8ri\n4awszhbhj0Z4Pga0SIY4tgjzu7p4Pj2d59PTuXHzZr40BVqTocKK2FiuKyig3ePhZ9XVHN8yeeOK\ncY7DL6uruby6mvuzsvhtfj5/y8jg2q1bmRHmy/hWRUZy+cyZtEdG8q5p8plgGzQGwlPapxGRSvHA\nhg3c6QaMd4fp0zhUUECj18sbSUlcXFzMRbNns6ijgyWrVk2qQA7HAM6pr+eVlSuJtSy+se++/C09\nPSwD7hXwTFoaZ+yzD/MiI6kJc4EE3ZIMG1IGBgA4Jkg3cjizLSKCt5OSeDsxkbLYWGwRkgYGKO7p\nYXZPD2+kpjK/p4eTgvzbRgF3bt7Mf+Lj+XVREc+npXFtRQVzQjUv6E40ezxcVVTExthYnjRNvhJs\ng8aJsBPJdhH+nJPDBwkJQ/sUEKEUyZZFg9cLQKplEWvbQbJy7KQPDOAAC7q7yfL5uCUvjzSfL+xm\n1wSLZo+HN5KTeTY9ndrISLL7+zm4o4Mf1tQwt7d3qAulgNeSk7kxP5+HsrKwRfhyczPnNDTgEJyu\n1qGdnby6ahXXFBTw/ZISjm5t5ZKaGpJCuD6/mZTEdYWFLAKqQ2zu9VgJO5FUSpFiWaS4C1spERyg\nPiKCTtMk2nHwOg51ITijo8cwWBUfz8G7CQJ3gBdSU+lwBX+QUxsaJtC6yWOiRrfbTJM3kpP5Z2oq\n5TExZPp8HL99O2fW14/6cBHg2NZWDu7o4P6sLFbEx3N3bi6PZmUxIMJ527ZxVhB+dw9wXWUl1du2\n8fOZM/ny/Pmc2dDAGQ0NIRWY3mUY3FBQwHuJidxump8ESE8hwk4kTeDrTU2cFsqZt0dha2Qk39ln\nH/4Y4EJcbYbB/dnZrIyLY2N0NHEh3JLYU8ZrbFsBH8XH82hGBksTEkj3+fhiWxt3lpfvUeq4JNvm\n0tpaGr1ebsvN5YzGRjpMk6sLC3kpJYU/lJeTGYQpoHk+H4+vX88H8fHcmJ/PI5mZnNrUxOmNjWS4\nLphgsSwujl/MnMkMw2CLaY6YBmwqEHYiOZ1Ichwura0F/BXyyqIiXktN5ebNm0N3/ZoAkHHIAqSA\nt5KSuGvGDFo8Hj7b3s6zq1eTNUYhyxgY4MatW4e2n1+zhpvz8jh13jzO2raNc4LUmj+4s5Pn167l\no7g4fp+by5MZGRzQ2ck3mpo4pL190m/kjdHR/N/s2fwSuGaKDyZqkQwTFnd18fyaNdyTnc3ZJSV8\noa2NaysqwvIfONaO9tK4OG7Kz6fZ6+W0xkbO3bZtwn6HOMfhmspKjm9p4cqiIl5JTeXOTZuCFqLz\nma4uHl+/ngaPh7tmzOCXRUV4lOLoSR502hgTg1cprjHNSb1uMAjHe2zaEqkUF9fVcVxLC1cVFXHs\n/vtzeVXVtImb3BYRwW/y81kVF8cJzc1cVlMzaRX4oM5Onl+zhlvy8jhp/nx+WVHB17Zvn6Srf5pM\ny+Laykr6Kiu5rrCQlp381xONx3EYCMFZUxOBFskwpLivj0fLyvwhIoWFPNndzR2bNxMTQg798cQC\nHs7M5P7sbOZ3d/PiqlWTlondAspiY1kaF8e/k5JYHxMDQHC9gZ8QBfymomLSr9tumhy7//6Tft1g\noEUyTDGArzU3c1h7O1cVFnL8/Pn8vKqK41pbg23abhH8M4kCYVNUFD+bNYtuw+D28nJ/8ogJxAbW\nx8TwUXw8/3bjKqMch6z+fj7b0cGvt26lIMxnw4wHcbaNJcIyYHGwjZlgtEiGOekDA/ypvJyXU1K4\noaCAZ9LSuDPEW5UdHg8Ru5m7beNvPf41O5ujWlr4VVXVhMUs9hoGL6Wk8K+kJFbExxPhOGT5fBzS\n0cFVFRVaFEfABCIdh0tMk/8E25gJJixFMpSSI4QCApzQ0sJBHR1cVVQU0q3K/8THsy0ykvLoaFbE\nxrJwhJZhk9fLZbNmsS0igj+Ul7NogluPa2NiuDE/n6NaW3mgrIw5k5SKrk+ENe4MoJEwgP27uogM\n0foeZ9us0gM3mvHEmODKnmZZ3FVezish2qrsA4p7ezmzvp7/xsfzUmoqv6ispKS3l+LeXgRYHhfH\nZbNmUdLTw0urVjEeUwL6RVgZF8cHCQm8m5hIimVx98aNQy3TxV1dIMLrKSlcNyz8Z6Jo9Hp5MiOD\np9PTMZUatV4MGAYHd3Twuy1bQjIzUIJtE7yhq8lDi+QUQ4DjW1o4MMRalRZw0vz5tHs8pA4M0GWa\nGI7DvdnZtHm9pAwM8Nn2dl5IS+Psujq+1zjSunJ7xw35+byYlsaCzk6+2tTEA9nZPJaRQbbPx5Lk\nZD5yp7jG2PbQDdFtGDySmcnKuDhm9vZyZkMDzV4vcbZNimURb9t7JFwKWB0by8OZmbyfmIipFKZp\n0rGLMr8BfpuQwLNpaZzi5qIMJRIta9wmBYQyYSmSoZiwNVAmq1INtioHfZV/mjGDiFFalOLapdz3\n325o4LBRpk42er1cNHs2SZaFI4IAplJ+wRh8dRlcEdFQinaPhyTL4ql16/hPYiIrY2O5uLaWOMfh\nw/h4/m/2bF5OTeX3mzbxma6uvfrOfSLckpdHu2fHaj04RfW0piaObW0lxbL4bUEB8ZZFQV8fN23e\nTF1kJP9LSOCHxcVURkZSHxFBpOPQ7fGwLiaG59LTiXQcHBF8ItgiZPh8nLB9O8e1tFA4SoZxC3gj\nOZn7s7PZFhGBT4RTDIMnA/g+VwA3uomA9+vuDrkJBMlhuAjd3hCWIhmuPslBUZkshvsqP0hIGPHh\nMlwcDaVo9nr5TWEhAN4RRHXAnV3xjaYm8vr7GRAZEv7hy8Qqd9tUaugan29vJ9G2Ob6lZSgt2VtJ\nSVxVWMh36+v5QV3dHg/OtJsmN+bnMyBCl2myOi6O/lFmgLyRnEyCbRPjOPy4pgZLhFdSUvjBnDn+\n7zDM/uuBKwbPMyi6w857O3BZZCSPZ2TwWGYmi7q6uGPTJgSojoxkTWwsK2JjeSMlBQV0ejwsZc9H\ngjsBQ4QfFxfz9Nq1ITVvOyXI0yIni7AUyXBoSTr48+p1mSYvp6SwPSICyxWNySbNsjhxD2ZkDAAP\nZ2fzx/JyFkzgoMnG6GiuKizkisrKvXYHlEdH82Zy8pBARzJyaz0SeDsxkXeTkobEO8px6DEMDPd9\nlyfw2+FH7h8eD28CJ8XFcfK8ebS65/A6Dp2mSYRhMNZhIMcwiHXnkd8cQv7JwSQzhMH9OBYCrhUi\nYgJLgVql1Iki8m8g3v04A/ifUurkEcrZwGp3s0opNeY0c6HaknwmLY1HMzMp6u3l4/h4OofddI+u\nW8erKSk8mpnJFxd8avFJAByl6PJ6ibUsBscMPUpxSU3NHoncWDm3oYE3UlI4e+5cli5bNiHXUMCV\nRUUc3dIyZn9pvG3TthuB6wcwDB7FL27NIjA4MiuyQytxTzkSKDZNVpoms4GN8Mm5x4lfmmbI+Seb\nvF6/C2eKj3DvSUvyh0AZkACglDps8AMReQZ4YZRyvUqphXtt4QiEUkvSAX5ZWMj62FhqoqKY09ND\nj2lyaHs7P6ir4yvz5+N1HOb29hLd1MSjWVnk9vdzaXX1Dll9lAjbPR5/4LTHw+WVlSzo7mZDdDQ3\n5efzfGrqpIxU10ZEcFFxMb2myT0bNkzINRzgvqwsmrxefjnJ6/Z82/0bb1ZMwDmHM9w/uX93N7OD\n6J9UwN05ObyakkLaFBdICFAkRSQXOAH/gNulO30WD3wR+N64WzcKoTJn9GdFRbyV4l85eH5XF3es\nWUPBTg78N1asGPKRFfh8PL52LWfstx/nzJ3LB8uW7fAPmA28vWIF1+Tnc2teHic3N/OT6moO7ujg\nV+5I9ZWVlRM2V/sed9Gm41pauLSmhugJEOQGr5eLZ8+mxePhzvLyMft7QumBOdF0Ah4RfjxrFk+t\nWxeU0C4F3Jyby4tpacwxzQl/OIQCgfYxbgd+BiNmuPoq8KZSarRohigRWSoiH4jIp7rje8LVQK9p\nkhAio2plsbHEuK3BC+vqPiWQ4M9TmDnMwT2nr49v19cDsDru0/mbDeCaqir+tnYtL6amctDixfw2\nP58/lZfz45oariks5MLZs8fs5xqJe2bMoLSzkyuqqiZEIBXws1mzSLIslqxaxfyenlGPtYCymBh6\ndtEN/ig+nl8WFWGHqPtlIrAMgw7T5LqCgkm/tg38urCQl9LSOGqaCCQEIJIiciLQqJQazTl1OvDE\nLk6Rr5QqBc4AbheRWaNc5zxXTJc2jZJQ9xogv69vUv1zuyLCcfhJdTVvrFjBZzo7AyrTYxi8lpLC\nSc3NLNpFqEuBz8fj69YBDMXknbR9O0+vXYsjwpcWLmStm2xhLKyNiWHwkbN/ZyfvJSUxEY+gDsPg\nrJISNkVFceewQO6RGBDhp7Nm8f2SEj6/aBGliz8ZE+41DJYkJ3NxcTE/njWLVsOgc5Iz4ASbCz0e\n3ktM5J9uL2aisYH3EhI4p6SEd5KS+K5p8vykXDk0CKS3cyjwFRE5Hn/SkQQReVQp9W0RSQUOxN+a\nHBGlVJ37ukVE3gYWAZtHOO4e4B6A0tLSEZsG3wL+HhnJzbm5/KSmZlxH+Rz8a51YIiTaNp/fKU6w\n3uNhqRt0PHiD95gmAqOuPdIH3Jyfj0+EbzY1UdLTwxWFhUQ6DpdWV+/WnlPnzWNhZydXV1YO7c8a\nGOBPGzdy0OLFrIuJYb9dtMZ2R7PHw1n77IPXcTirvp7ayEgObm9nPL1MPuCv2dn8PT0dA/9vd8Gc\nOVxSW8sBI4yc+0S4dNYsVsXGcrdhcLa7/3d5eayMi6MiKooox6HDMPi+YfDXcbQ1XLgF+KNp8rv8\nfOb19FA0gdMo305M5LcFBfhE6DIM7jYMzp+wq4UmuxVJpdQvgF8AiMjhwE+UUoO+79OAF5VSI/6X\nRCQZ6FFK9YtIGn7BvWlvjX0UeMEweCY9nUVdXWP2zX120SJ8hgFuGIPXccj2+aiLiODWTZs4dFjr\n8MKSEnoMgxjHGYorjLFtSkYQqT7go4QEriksJG1ggE0xMbySlkZ2Xx/bIyL4QW0tsbvpzp66777Y\nIhzS0UGfYezQ/a2KisLrOJw2xlHOP+fkUNDbi1cpnktPJ6e/n99s3TpuD582w+DUefNIsiwuqa3l\ny9u30+z1ck3B/7d35uFRlecC/73nzGQmZE9mspMMhIAQRDa3thaxtrRaRa/3tljrWvVqN6+tWr21\nVVEvam2forZVW1Hbeguu2Fqr17bWVq0LKBRBhLAkQBICCZOQkEwyc777xzmJISRhJgvJDN/vefJk\ncs6cM9873+Sd73vXUq6eMoVJBw6wtLISn2M+CYlwzaRJbEhJ4RHTZBGwFNgaDvO0z4cyDM4Fnk3w\nStjR0A64Hfvk8g0b8I6AyWG5388DRUW0m+ZRkVnTH0O1my8C7up5QETmAlcppS4HpgIPiUhX47m7\nlFIbhvKC+7GrRe8ehkZfK9av57zp03n4o4+Y0taGx7IwgLOnT+eB4mKWO7ZEBex1u7l92zZOPUwT\nL4BPOdvDr+zezbd37sQAnvf5uLO0lOuqq1kURX+ek5ubSVKKRwoK2DRuHHdv3dp9brfbjQC/yc2l\nLimJ7zqvEStrU1PJ7+jgqtpajh3meMhmw+DiqVOZ3trKT7Zs6R5fbmcnP6usJOishM6dPp1L6+rs\n96q8nI3JyTxpmpzZNUb4OJhbcxD1hkGxy8XtpaV8v7p62Bw5ClhaVMQzfj9ppsnYyvM58ogag0bv\nuXPnqlWrVvV7Pj0c5qK6Oi4dhn4jJ86ezWW1tfxnbW33sdcyMliTmkpYBEMpDGz744VRdqqbO3s2\nr65dS1qvbXi7SEzf+C1E95AAABIISURBVBZw/tSpbBk37qB4xQiwLD+fh4qK8EQiFHZ0sGLDhpgV\n5XspKfxwwgTqPB5eWru2e0U3VJ7KyeH+8eM5vrmZO7ZvH9AJ9M/0dG4JBLCADsPgj6bJqcMyiqOD\nLwMvhsOERThn717Or68fUmuJThFuCQR4PSODmQleBk1EVjv+kgGJy69ow+XikYICfOEwZw2xhH5E\nhKJeXul5TU3Mi2LF2Bc/KSwEkT47G8a6JbpoyhS2jBvHYx9+eNBxE7iiro6v1dXRbhhcNmUKV5aX\n86vNm2O6/+zWVpZs3cqlU6fyUGHhsIT9vJyZyf3jx3P9jh1Rzc2s/fspCoWo9Hp50zQZ1oDao4AV\nAC4XecBKn4/n/H5m79/PJXV1zG5pidl0smT8eF7PyOBa0+SO4R9uXBKXxp0g0G6a/LS4mO0ez+Dv\n49i2Ng+Dl7j7nklJiFL8Njd3SGMD+JyTifKU39/neQMYZ1n8bPNm1qSnc01ZGQsrKrhr/PioX+PY\nAwd4ft063k1LY+H06WwY5HvxbE4O51RU8D+BgJ0hFIWCbDMMrp48mS3JyWx2ubSCHAK7scPjvmkY\nvJ2WxrWTJnFeRQUvZGfTEWUsaQR4JTubXK0gDyIuV5Jg203chsGFU6dyY3U1Zw4iLOh5R/lUDKM9\n7ubt22k1DJ72+3mosJAZra2sSU3luQ8+OCheMhouqq/nwaIiwodxVHSt/t7IzATgr6bJjYfxnvfk\nhexsmk2TZrebt9LTmRalx/y20lL+mJODx7JwK8UVNTWc2dhIehT9wdsMg6+Xl7PF62WTaVIU9Wg1\nA3EvcK9hsBUoM03uHT+eu0pKSHEcjgNhYTskR76iZnwRt0oS7Io0AtxVUsLslhYKYrTFnLtnD/cX\nF/OU39+9ahsqScCPHSfLy5mZ/D0zE4Wd5xqrkgTbTjf1MEp8nGV12yzvKyri7bS0AZ/fmxd8Pprd\nbu7esoXTBogYqEpK4nm/n0qvl03jxtFuGPykspKy9nZ8nZ24ozQntIvYCjI5WSvIEWIiTqEPl4sy\noNFJHzzc1vH8kR1WXBLXShLsD0Iy8PXycn750UcxOR/SLYvszs4Ry+BZEAyyIBhkfkbGoOwauxwP\n/qQY8nQjQMgwqHO5yI9Srmc++IDvTJrEbYEAavt2Tg8G+VNWFj8qKQEgLxSiPimJNtOkorWViW1t\nLGxo4MTm5kGV7lqRm8vm5GQqtYI8IhwSlKyJibhXkgAPmyaXifCLwkJ+EGPBhPLWVl7LyiLMyL0Z\nZq9itNGS56yMvzl5Mt+trub8KEKHZrS28kR+PuceeyyPbtwYVaHWJOCBykoezM/n1kCAJZZFk9vN\nDVVVFHV0sMPjIdDeztz9+4flPXonLY2wVpCaOCEuHTe9uRDIMAxeysnhd35/TGl192+xv2ffyMgY\nkbF10TKIaikuYPG2baAUW5OTo7rmM8Egb61eTadhsCw/P+rX6gCeyM9n4d69XLR7N8mRCP/IyOD4\n5mYW7dlDdmfngHnU0aKA9SkpfHbId9JojgwJsZIE2AvkGAYPFhbySEEB39uxg89GaWcUpdg5RE/0\nQBjYpcGize/uyTupqSDC2TGEOrmAW7Zt445AgG+aJg9UVvb73Efz8njO56PB7WbagQNcv3MnAAsa\nG7m+rIwzZswgu7OTrY7XOy8U4o8ffBCzHGA7a57y+ThgmjwzqDtoNEeehFGSgN25zeVCsAu6/iE7\nm/K2NkpDIfI6OqhobSXocpFsWeQ49rpry8rI7uw8JFd7uNiWlESjy0XxIFdht1ZX87esLC6bMoV3\n33sv6uvOamzktgkTeKufFfJHXi83T5xIs2lyZW0tn2xqOsixlN/ZyWMbN/JYfj7VHg8/37yZ1zMy\nuCMQYLnfH1XWUE8iwDnTpxN0ucgSIbp1sUYz+iSUkuxCYfcFeTMzk3fT0/FaFhGngZNbqe4mTkWh\nEOtSUzmjoYEW0+zOzR5OHiwqAhGu6yckJyTC/2Vnc2ZDQ7+2j6JQiMrkZB4sKOD91FSu27kzqqKr\nn29o4KWcHF7OzGRBMEiLYbA8N5fnfT4a3W5Ob2zkhh07+s0jN4GvOWXdAD7f2Mj9xcXcW1LCOXv2\n4D3sCD7mlwUF7DdNNoowKYbrNJrRJiGVJPQofGkYYBisA+6G7vL9S71ednq9eCIRXs7O5vc+HwBn\nNDRweW0t+cPU5Kir8XzP2MMIHxcO/o+KCmo9HnI6OzmupaVPhfXExo3cV1jIH3JyKAyFOH/aNB7Y\ntImTDrN9v337dk7Yv5+bJ07k+4BHKUra2/lyfT3n7d0bc3bNPSUlNLlcXLVrV0wKEuA5n48IaAWp\niTviMnd7pDgHeDkSQYkwf98+vlFTE3PsZW/CwElz5vDa++93K8DrJ07kNachFYAnEiHkOHZurKri\n3w9T3ee0446j2eVixfr1lA1QJssCbg4E+Htmpt3oyjS5qaqKhYMIvF+XksKlxxzDt3fs4KIYe2I3\nmyanzZyJ27LsqksazRggoXO3R4qVAKbJt4GHMzN5KSeHt1evHlJ9xRZHKcybNYuCUIhTg0Fezcri\n2upqLuhh17OwleddpaW8mZHBZbW1TO8n8+WltWv5xJw5bPN6B1SSj+TnszotjSXbtnF8czNLSkq4\nfcIEDphmVOFEXVR6vVx6zDFcsWvXIQryGZ+P41pamDTAOAzni7hcK0hNHKI/tX1wH7DdNEmORLgt\nEOhWdI/n5vKDQIBXnfS/aNiblESSZTG1tZX0cJhqj4fPNDZybi9vtYGdqTO7uZm/Z2bybD/52mDH\nNU5ubeXGsjIqvX1vfIOGweP5+dxaVcUpTU14leJbu3YB8GRu7oBj7oDu9hC/z8pihd9PSjjMr/Pz\nuWzyZGrcbt5IS+ONtDSWlJayqKKCT8yaxfUTJvR5v7CzYv5wDO5aNJrDobfbA3Aj8LNwmHbDYH4w\nyCvZ2d0Fel9Zu5asEcjUsYBTZ85kcRS1Ky845hg+Sknh0Y0bD6oH+YfsbH5eVERFayv39qhDuSk5\nma9Mm8an9+1jQWMjHYbBWb223qtSUrimvBwBMsJh9rndpIfDNDlRA8r56ZlP/sZ777HS52NpcTFX\n1NTQ7HKxftw4Gtxumlwugi4XXsui1DTZOPS3SKMZFqLdbmslGQVfA35jWSRZFjNcLv4JfGfHDr4S\no20uGl7MzmZpUREvrVsXVZZOV/+Xm7dvp9Hl4p20NNampXHB7t1cUVuLp9f8bvN6+W5ZGdXOCvS8\n+nq+t2MHj+Xl8fPiYgBuqKpiYns7b6en89l9+5jU1sbrGRm8mZ7O7qQk6t3u7sZnHssit7OTdhFu\nKCujyWlpETIMTmlqYllBAaJUt/1VoxkraCU5gnT9u7+6Zs0hhXUHgwLWpqSwPDeX91NTaUhK4qt1\ndZS3tTEvGCTFsvpVmCfMno1LqW6HiGFZfKOmhoujKEj8r5QUFpeWEnS5aHa5sERYsnVr1EH4A8nz\nclYWN0+ciMeyMIFWbY/UjDG042YE2Q/4IxGWOWl8JaEQBrYnu94pSlHQ0dGnYusQocrr5V8pKSzL\nz6fF5aJLzbaL2CFLlsVv8/JIi0RYHAiQ2dnJyU1N3NorL/26CROwRFjQ0MBfsrL4QkMDK30+zonS\nKTOjtZUVGzbwiVmzsES4sqZmyAoS7L7MT+blkWNZ1BgGQ2+0odGMHlpJDoJUINU0Wenz8bTfj0sp\nzq+v5x8ZGWxOTsYEfJ2dXF5Tw1mNjYSxnSXrU1J4LSMDl1PwIuRycbJzv+XOb8BWlAAuF9uAaabJ\nC34/f/L5SA+HOampiS3JyVQ5W+a/ZmZy9p49TAyF8ChFRgzxj++mpRExDFauW0fxEMOdwF4xPpmX\nRxKwV68eNQmAVpKDZA+Ay0ULMB54PC+PkAjzDIPlQKnHw90lJWwaN45/ZGSw1+2m3TQ5GXgzhtf5\nb2zP95vvvUdEhLfS03kxO5ttTsGLvFCIPUlJPJ2biwDHDtDLuy8WBwLMbW4ekoJU2AHye91uvjhj\nBmB7yJ/Cbqep0cQzWkkOkVRgH0CvKj8h4HTT5Fmfjw4RNhnGoLJNnotEmNPSQpJSoBTzg0HmB4NU\nJSXxT0f5Lqqvp9UwcEHMTaA6RDCgu01uNFjYaYbzgkGanG59dR4Pc5wMoCKg0bJYqFeSmgQgaseN\niJjAKmCXUuqLIvIYMA/oilO5RCm1po/rLgZudv68Qyn1+OFea6w7bo4kM8JhNhkGF9TV8fUeHR2H\nizfS0rhm8mTeXb06KiX5m9xclvbqoeMCPEAr6KwaTdwQreMmlk/zNcCHvY5dr5Sa6fz0pSCzgVuA\nE4ETgFtEJCuG1zzq+ZTLBUqxrLBwRO5/ZyAARL+K7KpEHgIeBZYAnUALMAO4WytITYIR1XZbRIqB\nM4E7ge/EcP8FwCtKqUbnPq8Anwd+F+M4jzpOANZYFp2GwaX19VzSoxpPTyLQHYPYIUKnCJ2GQQQ7\n06Xrx+zxXEMpTCAlEmGv283y9etpc5Rbl6c9LILl3M8SIQJUe73cWVpKtmWRZBhc0mssa4f5PdBo\nxgLR2iR/CtwA9O4wdaeI/BD4C3CjUirU63wR0LNG2E7nmOYwrFYKy1Fc/5uXx1N+P4K94gs7yiss\ncpAt0VQKAztXuuu5gl1UuIuurBmc+3gsiwunTu1WtNLHtV2PQ4ZBSjhMg0ubsjVHD4f9tIvIF4F6\npdRqETm1x6mbgDrsVOKHge8Bi3tf3sct+zSCisiVwJUAJU4DqqOZfSJsxXYKbTQMNhsGFrbX2AdM\nB+YAZT0vGo6slsPdQytIzVFGNJ/4TwJni8gZgBdIF5HfKqW+6pwPicijwHV9XLsTOLXH38XA3/p6\nEaXUw9jKlrlz5469NKAjTDow03k8fzQHotEc5RzWyq6UukkpVayUCgCLgL8qpb4qIgUAIiLYpRj7\nanzyMvA5EclyHDafc45pNBpNXDCUvdMTIuLH3lKvAa4CEJG5wFVKqcuVUo0icjvwrnPN4i4njkaj\n0cQDY7LAhYjsAaqwzW8Dl+lOLI4mebWsiUu8yFuqlOq/cKvDmFSSXYjIqmiCPROFo0leLWvikmjy\n6shfjUajGQCtJDUajWYAxrqSfHi0B3CEOZrk1bImLgkl75i2SWo0Gs1oM9ZXkhqNRjOqjEklKSIz\nReQtEVkjIqtE5ATnuIjIfSJSKSL/EpHZoz3WoSIiKxw514jIdhFZ4xwPiEhbj3MPjvZYh4P+5HXO\n3eTM7UcismA0xzlciMi3HHnWi8g9zrFEndtDZHWOx/W8jtVE3HuA25RSf3LSIe/BTm/8AlDu/JwI\n/ML5Hbcopb7c9VhEfszH9TkBtiilZh56VfzSn7wiMg07o6sCKAT+LCKTlVJD77Q2SojIfGAhMEMp\nFRKRng3PE2pu+5M1EeZ1TK4ksYtgpDuPM4Aa5/FC4NfK5i0gsys9Mt5x0ju/xFFSRq4PeRcCy5VS\nIaXUNqASu2JcPHM1cFdXdSyl1PD3IB479Cdr3M/rWFWS/wX8SER2APdiVxyCxC69dgqwWym1ucex\nCSLyvoi8JiKnjNbARoje8ibi3E4GThGRt505PL7HuUSb2/5kjft5HbXttoj8Gcjv49T3gc8A1yql\nnhGRLwGPAKcTQ+m1scRAsiqlnncen8/Bq8haoEQp1SAic4CVIlKhlGoe4eEOmUHKm3Bzi/3/lQWc\nBBwPPCkiE4nTuR2krHE5rz0ZNSWplDq9v3Mi8mvsdhFgN937lfN4J3Zzwi6K+XgrPmYZSFYAEXEB\n/4ZdIrLrmhB2lwScWp5bsL+tx3zzn8HISwLOrYhcDTyr7Di7d0TEAnxKqT3E4dwORlbidF57Mla3\n2zXYTcYATgO6tmS/By5yvNwnAU1KqeHvjnXkOR3YqJTa2XVARPxiN1/D+UYuB7aO0viGm0PkxZ7b\nRSLiEZEJ2PK+MyqjGz5WYn9+EZHJ2AWq9ybo3PYpKwkwr2PVu30FsNRZcbTjVCwHXgTOwDb+HgAu\nHZ3hDTuLONRh82lgsYiEsVvPXJVAZeYOkVcptV5EngQ2AGHgG/HkAe2HZcAyEfkAu6j8xUopJSKJ\nOLd9ygrE/bzqjBuNRqMZgLG63dZoNJoxgVaSGo1GMwBaSWo0Gs0AaCWp0Wg0A6CVpEaj0QyAVpIa\njUYzAFpJajQazQBoJanRaDQD8P8j7eV7UbVPiwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ext = layer.GetExtent()\n",
    "xoff = (ext[1]-ext[0])/50\n",
    "yoff = (ext[3]-ext[2])/50\n",
    "\n",
    "\n",
    "plt.ioff()\n",
    "plt.plot()\n",
    "ax = plt.gca()\n",
    "ax.set_xlim(ext[0]-xoff,ext[1]+xoff)\n",
    "ax.set_ylim(ext[2]-yoff,ext[3]+yoff)\n",
    "\n",
    "paths = []\n",
    "layer.ResetReading()\n",
    "\n",
    "# Read all features in layer and store as paths\n",
    "for feat in layer:\n",
    "\n",
    "    for geom in feat.GetGeometryRef():\n",
    "        envelope = np.array(geom.GetEnvelope())\n",
    "        # check if geom is polygon\n",
    "        if geom.GetGeometryType() == ogr.wkbPolygon:\n",
    "            codes = []\n",
    "            all_x = []\n",
    "            all_y = []\n",
    "            for i in range(geom.GetGeometryCount()):\n",
    "                # Read ring geometry and create path\n",
    "                r = geom.GetGeometryRef(i)\n",
    "                x = [r.GetX(j) for j in range(r.GetPointCount())]\n",
    "                y = [r.GetY(j) for j in range(r.GetPointCount())]\n",
    "                # skip boundary between individual rings\n",
    "                codes += [mpath.Path.MOVETO] + \\\n",
    "                             (len(x)-1)*[mpath.Path.LINETO]\n",
    "                all_x += x\n",
    "                all_y += y\n",
    "            path = mpath.Path(np.column_stack((all_x,all_y)), codes)\n",
    "            paths.append(path)\n",
    "    # Add paths as patches to axes\n",
    "    for path in paths:\n",
    "        patch = mpatches.PathPatch(path, \\\n",
    "                facecolor='0.8', edgecolor='cyan')\n",
    "        ax.add_patch(patch)\n",
    "\n",
    "\n",
    "\n",
    "ax.set_aspect(1.0)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.6",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
