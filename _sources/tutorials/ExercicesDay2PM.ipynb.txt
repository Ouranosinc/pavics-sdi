{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Modify a provided PAVICS WPS workflow for a similar but different purpose  \n",
    "##### One potentially powerful tool for the Climate Scenarios and Services team is to provide users with example workflows that  can then be modified to different needs\n",
    "In this exercice we will ask you to modify the provided PAVICS workflow example below in order to :\n",
    "1. Change the spatial subset to a region of your choice \n",
    "* Select a different set of 3 consecutive years (2008-2010) - 3 only to keep time and processing reasonable\n",
    "* Calculate a 2 additional climate indices using CDO  - monmax (previous) as well as monmin and monmean\n",
    "* Download the resulting .nc files locally and make a plot - the plot should contain : original daily data, with monthly min, mean, and max\n",
    "\n",
    "PAVICS WPS urls:\n",
    "* PAVICS catalogue : https://pavics.ouranos.ca/twitcher/ows/proxy/catalog/pywps\n",
    "* Flyingpigeon suite : https://pavics.ouranos.ca/twitcher/ows/proxy/flyingpigeon/wps \n",
    "* Hummingbird suite : https://pavics.ouranos.ca/twitcher/ows/proxy/hummingbird/wps\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### Imports\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from netCDF4 import Dataset\n",
    "import requests\n",
    "from lxml import etree  \n",
    "import matplotlib.pyplot as plt\n",
    "from owslib.wps import WebProcessingService, ComplexDataInput \n",
    "\n",
    "# Work around function to handle reference \n",
    "def parseStatus(execute):\n",
    "    o = requests.get(execute.statusLocation)\n",
    "    t = etree.fromstring(o.content)\n",
    "    ref = t.getchildren()[-1].getchildren()[-1].getchildren()[-1].get('{http://www.w3.org/1999/xlink}href')\n",
    "    \n",
    "    return ref\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1 - search for datasets using the Catalogue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.1 List available catalogue processes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  1.2 we want the 'pavicsearch' process\n",
    "* let's describe the process first "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.3 Search for data - variable tasmax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Process the output "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.4 We have a lot of files - Let's filter for NRCAN anusplin\n",
    "* Filter the list for only 'nrcan'\n",
    "* Get only a 3 years of data - 1981 to 1983 (more manageable for today)\n",
    "* Files are not in sequential order - use sort() to clean up the list\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### End step 1 - Successful search and filtering of datasets\t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2 - spatial subset the ncfiles\n",
    "* let's try to learn how to use WPS more efficiently\n",
    "* subsetting functions can be found in Flyingpigeon \n",
    "* fist step initiate connection to flyingpigeon \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.1 List available flyingpigeon processes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.2 Flyingpigeon does a lot - use 'subset_bbox' process for now\n",
    "* let's describe the process first"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3 Create WPS inputs and execute WPS\n",
    "This time we will have multiple 'resource' inputs \n",
    "* Subset multiple .nc files with one WPS call \n",
    "* Subset only using lat lon bounds - other inputs left blank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4 subset completed\n",
    "Before moving on - Let's download one file to see how the subset worked"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3 - temporal concatenation using 'ncmerge'\n",
    "* 'ncmerge' can also be accessed in Flyingpigeon \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### As always : start by describing the process"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.1 Question : Are my subsetted urls (list_subset) opendap urls?\n",
    "* Simple test : follow one of the links\n",
    "* If you start to download : Not OpenDAP\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "##### 3.2 Test conclusion : The subsetted .nc urls are NOT OpenDAP\n",
    "* Future development - we would like to get both OpenDap and direct links as outputs from PAVICS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.3 We can still use them but resouce inputs must be sent using ComplexDataInput()\n",
    "* Create inputs list and execute WPS\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.3 Get WPS output location and download merged .nc file \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.4 Make a plot : we should have 3 years of data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### End step 3 - Successful temporal merge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 4 - Calculate monthly min, mean and max  \n",
    "1. Use CDO operators via Hummingbird - A different WPS suite\n",
    "\n",
    "##### 4.1 Let's start with connecting to Hummingbird\n",
    "##### As always : start by describing the process\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.2 List WPS services available in Hummingbird\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.3 We want to use 'CDO operation'\n",
    "* As always we start by ...... Describing the process!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.4 Create inputs & execute WPS\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.5 Download the output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.6 Plot the results and compare with daily data series\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.6",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
