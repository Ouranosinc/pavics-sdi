{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Modify a provided PAVICS WPS workflow for a similar but different purpose  \n",
    "##### One potentially powerful tool for the Climate Scenarios and Services team is to provide users with example workflows that  can then be modified to different needs\n",
    "In this exercice we will ask you to modify the provided PAVICS workflow example below in order to :\n",
    "1. Change the spatial subset to a region of your choice \n",
    "* Select a different set of 3 consecutive years (2008-2010) - 3 only to keep time and processing reasonable\n",
    "* Calculate a 2 additional climate indices using CDO  - monmax (previous) as well as monmin and monmean\n",
    "* Download the resulting .nc files locally and make a plot - the plot should contain : original daily data, with monthly min, mean, and max\n",
    "\n",
    "PAVICS WPS urls:\n",
    "* PAVICS catalogue : https://pavics.ouranos.ca/twitcher/ows/proxy/catalog/pywps\n",
    "* Flyingpigeon suite : https://pavics.ouranos.ca/twitcher/ows/proxy/flyingpigeon/wps \n",
    "* Hummingbird suite : https://pavics.ouranos.ca/twitcher/ows/proxy/hummingbird/wps\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### Imports\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from netCDF4 import Dataset\n",
    "import requests\n",
    "from lxml import etree  \n",
    "import matplotlib.pyplot as plt\n",
    "from owslib.wps import WebProcessingService, ComplexDataInput \n",
    "\n",
    "# Work around function to handle reference \n",
    "def parseStatus(execute):\n",
    "    o = requests.get(execute.statusLocation)\n",
    "    t = etree.fromstring(o.content)\n",
    "    ref = t.getchildren()[-1].getchildren()[-1].getchildren()[-1].get('{http://www.w3.org/1999/xlink}href')\n",
    "    \n",
    "    return ref\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1 - search for datasets using the Catalogue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# catalogue WPS url\n",
    "wpsURL = 'https://pavics.ouranos.ca/twitcher/ows/proxy/catalog/pywps'\n",
    "\n",
    "# Connection \n",
    "wpsCatalogue = WebProcessingService(url=wpsURL)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.1 List available catalogue processes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "getpoint \t : Return a single value from a NetCDF file at the given grid coordinates. \n",
      "\n",
      "ncplotly \t : Return a dictionary storing the data necessary to create a simple plotly time series. \n",
      "\n",
      "pavicrawler \t : Crawl thredds server and write metadata to SOLR database. \n",
      "\n",
      "pavicsearch \t : Search the PAVICS database and return a catalogue of matches. \n",
      "\n",
      "pavicsupdate \t : Update database entries using key:value pairs and identified by their ids. \n",
      "\n",
      "pavicsvalidate \t : Query database entries for missing required facets. \n",
      "\n",
      "period2indices \t : The final index is inclusive. \n",
      "\n",
      "pavicstestdocs \t : Add test documents to Solr index. \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for process in wpsCatalogue.processes:\n",
    "    print ('%s \\t : %s \\n' %(process.identifier, process.abstract))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  1.2 we want the 'pavicsearch' process\n",
    "* let's describe the process first "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inputs : facets  :  Comma separated list of facets; facets are searchable indexing terms in the database.\n",
      "inputs : shards  :  Shards to be queried\n",
      "inputs : offset  :  Where to start in the document count of the database search.\n",
      "inputs : limit  :  Maximum number of documents to return.\n",
      "inputs : fields  :  Comme separated list of fields to return.\n",
      "inputs : format  :  Output format.\n",
      "inputs : query  :  Direct query to the database.\n",
      "inputs : distrib  :  Distributed query\n",
      "inputs : type  :  One of Dataset, File, Aggregate or FileAsAggregate.\n",
      "inputs : constraints  :  Format is facet1:value1,facet2:value2,...\n",
      "inputs : esgf  :  Whether to also search ESGF nodes.\n",
      "inputs : list_type  :  Can be opendap_url, fileserver_url, gridftp_url, globus_url, wms_url\n",
      "outputs : search_result  :  PAVICS Catalogue Search Result\n",
      "outputs : list_result  :  List of urls of the search result.\n"
     ]
    }
   ],
   "source": [
    "proc_name = 'pavicsearch'\n",
    "process = wpsCatalogue.describeprocess(proc_name) # get process info\n",
    "for i in process.dataInputs:\n",
    "    print('inputs :', i.identifier, ' : ', i.abstract)\n",
    "for i in process.processOutputs:\n",
    "    print('outputs :', i.identifier, ' : ', i.abstract)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.3 Search for data - variable tasmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProcessSucceeded\n",
      "https://pavics.ouranos.ca/wpsoutputs/catalog/0cd8f4c2-055f-11e9-b5a4-0242ac12000f/list_result_2018-12-21T20:29:04Z__VfPP6g.json\n"
     ]
    }
   ],
   "source": [
    "# built Constraint string  variable = 'tasmax'  \n",
    "proc_name = 'pavicsearch'\n",
    "constraintString = 'variable:tasmax'\n",
    "maxfiles = '1000000'\n",
    "myinputs = [('constraints', constraintString),('type','File'), ('limit',maxfiles)]\n",
    "execution = wpsCatalogue.execute(identifier=proc_name, inputs=myinputs)\n",
    "print(execution.status)\n",
    "print(execution.processOutputs[-1].reference)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Process the output "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numer of files found : 13026 \n",
      "\n",
      "['https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r3i1p1/tasmax/tasmax_kdc_198902_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r1i1p1/tasmax/tasmax_kda_206005_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/cb-oura-1.0/HadGEM2-CC/rcp45/day/tasmax/tasmax_day_HadGEM2-CC_rcp45_r1i1p1_na10kgrid_qm-moving-50bins-detrend_2043.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r2i1p1/tasmax/tasmax_kdb_202907_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r1i1p1/tasmax/tasmax_kda_200310_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r3i1p1/tasmax/tasmax_kdc_209701_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r2i1p1/tasmax/tasmax_kdb_199110_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/cb-oura-1.0/GFDL-ESM2M/rcp45/day/tasmax/tasmax_day_GFDL-ESM2M_rcp45_r1i1p1_na10kgrid_qm-moving-50bins-detrend_2046.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r3i1p1/tasmax/tasmax_kdc_201311_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r4i1p1/tasmax/tasmax_kdd_202210_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r2i1p1/tasmax/tasmax_kdb_199406_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/cb-oura-1.0/NorESM1-M/rcp85/day/tasmax/tasmax_day_NorESM1-M_rcp85_r1i1p1_na10kgrid_qm-moving-50bins-detrend_1998.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r4i1p1/tasmax/tasmax_kdd_199403_se.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/ouranos/climex/QC11d3_CCCma-CanESM2_rcp85/day/historical-r1-r2i1p1/tasmax/tasmax_kdb_201703_se.nc'] ...\n"
     ]
    }
   ],
   "source": [
    "ref = parseStatus(execution)\n",
    "r = requests.get(ref)\n",
    "list_nc = r.json()\n",
    "print('Numer of files found :',len(list_nc), '\\n')\n",
    "print(list_nc[1:15],'...')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.4 We have a lot of files - Let's filter for NRCAN anusplin\n",
    "* Filter the list for only 'nrcan'\n",
    "* Get only a 3 years of data - 1981 to 1983 (more manageable for today)\n",
    "* Files are not in sequential order - use sort() to clean up the list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of files : 3 ['https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2008.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2009.nc', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2010.nc']\n"
     ]
    }
   ],
   "source": [
    "# filter netcdf_file list\n",
    "nrcan_nc = [i for i in list_nc if 'nrcan' in i and ('2008' in i or '2009' in i or '2010' in i)]\n",
    "# sort the filtered list\n",
    "nrcan_nc.sort()\n",
    "\n",
    "print('Number of files :', len(nrcan_nc),nrcan_nc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### End step 1 - Successful search and filtering of datasets\t"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2 - spatial subset the ncfiles\n",
    "* let's try to learn how to use WPS more efficiently\n",
    "* subsetting functions can be found in Flyingpigeon \n",
    "* fist step initiate connection to flyingpigeon \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flyingpigeon 1.1_dev\n"
     ]
    }
   ],
   "source": [
    "wpsURL = 'https://boreas.ouranos.ca/twitcher/ows/proxy/flyingpigeon/wps'\n",
    "wpsFP = WebProcessingService(wpsURL)\n",
    "print(wpsFP.identification.title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.1 List available flyingpigeon processes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "subset_countries \t : Return the data whose grid cells intersect the selected countries for each input dataset. \n",
      "\n",
      "subset_continents \t : Return the data whose grid cells intersect the selected continents for each input dataset. \n",
      "\n",
      "subset_regionseurope \t : Return the data whose grid cells inteserct the selected regions for each input dataset. \n",
      "\n",
      "pointinspection \t : Extract the timeseries at the given coordinates. \n",
      "\n",
      "landseamask \t : Mask grid cells according to their land area fraction. This process uses the ESGF datastore to access an appropriate land/sea mask. \n",
      "\n",
      "fetch_resources \t : Fetch data resources (limited to 50GB) to the local filesystem of the birdhouse compute provider. \n",
      "\n",
      "indices_percentiledays \t : Climatological percentile for each day of the year computed over the entire dataset. \n",
      "\n",
      "indices_single \t : Climate index calculated from one daily input variable. \n",
      "\n",
      "sdm_gbiffetch \t : Species occurence search in Global Biodiversity              Infrastructure Facillity (GBIF) \n",
      "\n",
      "sdm_getindices \t : Indices preparation for SDM process \n",
      "\n",
      "sdm_csvindices \t : Indices preparation for SDM process \n",
      "\n",
      "sdm_csv \t : Indices preparation for SDM process \n",
      "\n",
      "sdm_allinone \t : Indices preparation for SDM process \n",
      "\n",
      "weatherregimes_reanalyse \t : k-mean cluster analyse of the pressure patterns. Clusters are equivalent to weather regimes \n",
      "\n",
      "weatherregimes_projection \t : k-mean cluster analyse of the pressure patterns. Clusters are equivalent to weather regimes \n",
      "\n",
      "weatherregimes_model \t : k-mean cluster analyse of the pressure patterns. Clusters are equivalent to weather regimes \n",
      "\n",
      "plot_timeseries \t : Outputs some timeseries of the file field means. Spaghetti and uncertainty plot \n",
      "\n",
      "segetalflora \t : Species biodiversity of segetal flora. \n",
      "\n",
      "spatial_analog \t : Spatial analogs based on the comparison of climate indices. The algorithm compares the distribution of the target indices with the distribution of spatially distributed candidate indices and returns a value  measuring the dissimilarity between both distributions over the candidate grid. \n",
      "\n",
      "map_spatial_analog \t : Produce map showing the dissimilarity values computed by the spatial_analog process as well as indicating by a marker the location of the target site. \n",
      "\n",
      "subset \t : Return the data for which grid cells intersect the selected polygon for each input dataset as well asthe time range selected. \n",
      "\n",
      "averager \t : Return the data with weighted average of grid cells intersecting the selected polygon for each input dataset as well as the time range selected. \n",
      "\n",
      "subset_WFS \t : Return the data for which grid cells intersect the selected polygon for each input dataset. \n",
      "\n",
      "averager_WFS \t : Return the data with weighted average of grid cells intersecting the selected polygon for each input dataset. \n",
      "\n",
      "subset_bbox \t : Return the data for which grid cells intersect the bounding box for each input dataset as well asthe time range selected. \n",
      "\n",
      "averager_bbox \t : Return the data with weighted average of grid cells intersecting the bounding box for each input dataset as well as the time range selected. \n",
      "\n",
      "ouranos_public_indicators \t : Compute climate indicators: mean daily temp., min daily temp., max daily temp., growing degree days, number of days above 30C, freeze thaw cycles, total precipitation, and max 5-day precip. \n",
      "\n",
      "ncmerge \t : Merge NetCDF files in the time dimension. \n",
      "\n",
      "EO_COPERNICUS_search \t : Search for EO Data in the scihub.copernicus archiveoutput is a list of Product according to the querry and a graphical visualisation. \n",
      "\n",
      "EO_COPERNICUS_fetch \t : Search for EO Data in the scihub.copernicus archiveproducts will be fechted into the local disc system.outuput is a list of produces and a graphical visualisation. \n",
      "\n",
      "esmf_regrid \t : Regrid netCDF files to a destination grid. \n",
      "\n",
      "EO_COPERNICUS_rgb \t : Based on a search querry the appropriate products are ploted as RGB graphics \n",
      "\n",
      "EO_COPERNICUS_indices \t : Derivateing indices like NDVI based on \n",
      "\n",
      "kddm_bc \t : Bias correction method using Kernel Density Distribution Mapping (KDDM). \n",
      "\n",
      "freezethaw \t : Number of freeze-thaw events, where freezing and thawing occurs once a threshold of degree days below or above 0C is reached. A complete cycle (freeze-thaw-freeze) will return a value of 2. \n",
      "\n",
      "duration \t : Summarizes consecutive occurrences in a sequence where the logical operation returns TRUE. The summary operation is applied to the sequences within a temporal aggregation. \n",
      "\n",
      "icclim_TXx \t : Calculates the TXx indice: maximum of daily maximum temperature. \n",
      "\n",
      "icclim_SD \t : Calculates the SD indice: mean of daily snow depth [cm] \n",
      "\n",
      "icclim_TX90p \t : Calculate the TX90p indice: number of warm days-times (i.e. days with daily max temperature > 90th percentile of daily max temperature in the base period). \n",
      "\n",
      "icclim_R99pTOT \t : Calculate the R99pTOT indice: precipitation fraction due to extremely wet days (i.e. days with daily precipitation amount > 99th percentile of daily amount in the base period) [%] \n",
      "\n",
      "icclim_TXn \t : Calculates the TXn indice: minimum of daily maximum temperature. \n",
      "\n",
      "icclim_CDD \t : Calculates the CDD indice: maximum number of consecutive dry days (i.e. days with daily precipitation amount < 1 mm) [days]. \n",
      "\n",
      "icclim_TG90p \t : Calculate the TG90p indice: number of warm days (i.e. days with daily mean temperature > 90th percentile of daily mean temperature in the base period). \n",
      "\n",
      "icclim_SU \t : Calculates the SU indice: number of summer days (i.e. days with daily maximum temperature > 25 degrees Celsius) [days]. \n",
      "\n",
      "icclim_CFD \t : Calculates the CFD indice: maximum number of consecutive frost days (i.e. days with daily minimum temperature < 0 degrees Celsius) [days]. \n",
      "\n",
      "icclim_TN10p \t : Calculate the TN10p indice: number of cold nights (i.e. days with daily min temperature < 10th percentile of daily min temperature in the base period). \n",
      "\n",
      "icclim_TG \t : Calculates the TG indice: mean of daily mean temperature. \n",
      "\n",
      "icclim_TN90p \t : Calculate the TN90p indice: number of warm nights (i.e. days with daily min temperature > 90th percentile of daily min temperature in the base period). \n",
      "\n",
      "icclim_TR \t : Calculates the TR indice: number of tropical nights (i.e. days with daily minimum temperature > 20 degrees Celsius) [days]. \n",
      "\n",
      "icclim_RX5day \t : Calculates the RX5day indice: maximum consecutive 5-day precipitation amount [mm] \n",
      "\n",
      "icclim_vDTR \t : Calculates the vDTR indice: mean absolute day-to-day difference in DTR. \n",
      "\n",
      "icclim_SD50cm \t : Calculates the SD50cm indice: number of days with snow depth >= 50 cm [days] \n",
      "\n",
      "icclim_CWD \t : Calculates the CWD indice: maximum number of consecutive wet days (i.e. days with daily precipitation amount > = 1 mm) [days]. \n",
      "\n",
      "icclim_ID \t : Calculates the ID indice: number of ice days (i.e. days with daily maximum temperature < 0 degrees Celsius) [days]. \n",
      "\n",
      "icclim_R20mm \t : Calculates the R20mm indice: number of very heavy precipitation days (i.e. days with daily precipitation amount > = 20 mm) [days] \n",
      "\n",
      "icclim_CSU \t : Calculates the CSU indice: maximum number of consecutive summer days (i.e. days with daily maximum temperature > 25 degrees Celsius) [days]. \n",
      "\n",
      "icclim_RX1day \t : Calculates the RX1day indice: maximum 1-day precipitation amount [mm] \n",
      "\n",
      "icclim_WSDI \t : Calculate the WSDI indice (warm-spell duration index): number of days where, in intervals of at least 6 consecutive days, \n",
      "\n",
      "icclim_RR1 \t : Calculates the RR1 indice: number of wet days (i.e. days with daily precipitation amount > = 1 mm) [days] \n",
      "\n",
      "icclim_CSDI \t : Calculate the CSDI indice (cold-spell duration index): number of days where, in intervals of at least 6 consecutive days, \n",
      "\n",
      "icclim_R75pTOT \t : Calculate the R75pTOT indice: precipitation fraction due to moderate wet days (i.e. days with daily precipitation amount > 75th percentile of daily amount in the base period) [%] \n",
      "\n",
      "icclim_R95pTOT \t : Calculate the R95pTOT indice: precipitation fraction due to very wet days (i.e. days with daily precipitation amount > 95th percentile of daily amount in the base period) [%] \n",
      "\n",
      "icclim_R10mm \t : Calculates the R10mm indice: number of heavy precipitation days (i.e. days with daily precipitation amount > = 10 mm) [days] \n",
      "\n",
      "icclim_SDII \t : Calculates the SDII (simple daily intensity index) indice:  mean precipitation amount of wet days (i.e. days with daily precipitation amount > = 1 mm) [mm] \n",
      "\n",
      "icclim_DTR \t : Calculates the DTR indice: mean of daily temperature range. \n",
      "\n",
      "icclim_TG10p \t : Calculate the TG10p indice: number of cold days (i.e. days with daily mean temperature < 10th percentile of daily mean temperature in the base period). \n",
      "\n",
      "icclim_TX \t : Calculates the TX indice: mean of daily maximum temperature. \n",
      "\n",
      "icclim_PRCPTOT \t : Calculates the PRCPTOT indice: total precipitation in wet days [mm] \n",
      "\n",
      "icclim_TN \t : Calculates the TN indice: mean of daily minimum temperature. \n",
      "\n",
      "icclim_R75p \t : Calculate the R75p indice: number of moderate wet days (i.e. days with daily precipitation amount > 75th percentile of daily amount in the base period). \n",
      "\n",
      "icclim_TNx \t : Calculates the TNx indice: maximum of daily minimum temperature. \n",
      "\n",
      "icclim_SD5cm \t : Calculates the SD5cm indice: number of days with snow depth >= 5 cm [days] \n",
      "\n",
      "icclim_FD \t : Calculates the FD indice: number of frost days (i.e. days with daily minimum temperature < 0 degrees Celsius) [days]. \n",
      "\n",
      "icclim_R99p \t : Calculate the R99p indice: number of extremely wet days (i.e. days with daily precipitation amount > 99th percentile of daily amount in the base period). \n",
      "\n",
      "icclim_R95p \t : Calculate the R95p indice: number of very wet days (i.e. days with daily precipitation amount > 95th percentile of daily amount in the base period). \n",
      "\n",
      "icclim_SD1 \t : Calculates the SD1 indice: number of days with snow depth >= 1 cm [days] \n",
      "\n",
      "icclim_GD4 \t : Calculates the GD4 indice: growing degree days (sum of daily mean temperature > 4 degrees Celsius). \n",
      "\n",
      "icclim_TNn \t : Calculates the TNn indice: minimum of daily minimum temperature. \n",
      "\n",
      "icclim_HD17 \t : Calculates the HD17 indice: heating degree days (sum of (17 degrees Celsius - daily mean temperature)). \n",
      "\n",
      "icclim_ETR \t : Calculates the ETR indice: intra-period extreme temperature range. \n",
      "\n",
      "icclim_TX10p \t : Calculate the TX10p indice: number of cold day-times (i.e. days with daily max temperature < 10th percentile of daily max temperature in the base period). \n",
      "\n"
     ]
    }
   ],
   "source": [
    "for process in wpsFP.processes:\n",
    "    print ('%s \\t : %s \\n' %(process.identifier, process.abstract))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.2 Flyingpigeon does a lot - use 'subset_bbox' process for now\n",
    "* let's describe the process first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset  :  Return the data for which grid cells intersect the bounding box for each input dataset as well asthe time range selected. \n",
      "\n",
      "inputs : resource  :  NetCDF files, can be OPEnDAP urls.\n",
      "inputs : lon0  :  Minimum longitude.\n",
      "inputs : lon1  :  Maximum longitude.\n",
      "inputs : lat0  :  Minimum latitude.\n",
      "inputs : lat1  :  Maximum latitude.\n",
      "inputs : initial_datetime  :  Initial datetime for temporal subsetting.\n",
      "inputs : final_datetime  :  Final datetime for temporal subsetting.\n",
      "inputs : variable  :  Name of the variable in the NetCDF file.Will be guessed if not provided.\n",
      "outputs : output  :  JSON file with link to NetCDF outputs.\n"
     ]
    }
   ],
   "source": [
    "proc_name = 'subset_bbox'\n",
    "process = wpsFP.describeprocess(identifier=proc_name)\n",
    "\n",
    "print(process.title,' : ',process.abstract,'\\n')\n",
    "for i in process.dataInputs:\n",
    "    print('inputs :', i.identifier, ' : ', i.abstract)\n",
    "for i in process.processOutputs:\n",
    "    print('outputs :', i.identifier, ' : ', i.abstract)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3 Create WPS inputs and execute WPS\n",
    "This time we will have multiple 'resource' inputs \n",
    "* Subset multiple .nc files with one WPS call \n",
    "* Subset only using lat lon bounds - other inputs left blank"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('resource', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2008.nc'), ('resource', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2009.nc'), ('resource', 'https://pavics.ouranos.ca/twitcher/ows/proxy/thredds/dodsC/birdhouse/nrcan/nrcan_canada_daily/tasmax/nrcan_canada_daily_tasmax_2010.nc'), ('lon0', '-120.0'), ('lon1', '-90.0'), ('lat0', '49.0'), ('lat1', '55')]\n"
     ]
    }
   ],
   "source": [
    "myinputs = []\n",
    "# To keep things reasonably quick : subset jan-april\n",
    "for i in nrcan_nc: \n",
    "    myinputs.append(('resource', i))\n",
    "myinputs.append(('lon0', '-120.0'))\n",
    "myinputs.append(('lon1', '-90.0'))\n",
    "myinputs.append(('lat0', '49.0'))\n",
    "myinputs.append(('lat1', '55'))\n",
    "print(myinputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "ReadTimeout",
     "evalue": "HTTPSConnectionPool(host='boreas.ouranos.ca', port=443): Read timed out. (read timeout=30)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    386\u001b[0m                     \u001b[0;31m# otherwise it looks like a programming error was the cause.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 387\u001b[0;31m                     \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    388\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSocketTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBaseSSLError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/packages/six.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(value, from_value)\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    382\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 383\u001b[0;31m                     \u001b[0mhttplib_response\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    384\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1330\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1331\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1332\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    296\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 297\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    298\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    257\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 258\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    259\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    585\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/contrib/pyopenssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    293\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mrd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The read operation timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mtimeout\u001b[0m: The read operation timed out",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mReadTimeoutError\u001b[0m                          Traceback (most recent call last)",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    444\u001b[0m                     \u001b[0mretries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_retries\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 445\u001b[0;31m                     \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    446\u001b[0m                 )\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    638\u001b[0m             retries = retries.increment(method, url, error=e, _pool=self,\n\u001b[0;32m--> 639\u001b[0;31m                                         _stacktrace=sys.exc_info()[2])\n\u001b[0m\u001b[1;32m    640\u001b[0m             \u001b[0mretries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/util/retry.py\u001b[0m in \u001b[0;36mincrement\u001b[0;34m(self, method, url, response, error, _pool, _stacktrace)\u001b[0m\n\u001b[1;32m    356\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mread\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_method_retryable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 357\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreraise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_stacktrace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    358\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mread\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/packages/six.py\u001b[0m in \u001b[0;36mreraise\u001b[0;34m(tp, value, tb)\u001b[0m\n\u001b[1;32m    685\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 686\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    600\u001b[0m                                                   \u001b[0mbody\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbody\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheaders\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mheaders\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 601\u001b[0;31m                                                   chunked=chunked)\n\u001b[0m\u001b[1;32m    602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    388\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSocketTimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBaseSSLError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mread_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m             \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_raise_timeout\u001b[0;34m(self, err, url, timeout_value)\u001b[0m\n\u001b[1;32m    308\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 309\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mReadTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Read timed out. (read timeout=%s)\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mtimeout_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    310\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mReadTimeoutError\u001b[0m: HTTPSConnectionPool(host='boreas.ouranos.ca', port=443): Read timed out. (read timeout=30)",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mReadTimeout\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-4f8fb26be90a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# This could take a some time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mexecution\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwpsFP\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midentifier\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproc_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmyinputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexecution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexecution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocessOutputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreference\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexecution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatusLocation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/src/OWSLib/owslib/wps.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, identifier, inputs, output, mode, lineage, request, response)\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0;31m# submit the request to the live server\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    327\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresponse\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 328\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexecution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubmitRequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    329\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0metree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromstring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/src/OWSLib/owslib/wps.py\u001b[0m in \u001b[0;36msubmitRequest\u001b[0;34m(self, request)\u001b[0m\n\u001b[1;32m    854\u001b[0m         response = reader.readFromUrl(\n\u001b[1;32m    855\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Post'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0musername\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musername\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpassword\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             headers=self.headers, verify=self.verify, cert=self.cert)\n\u001b[0m\u001b[1;32m    857\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/src/OWSLib/owslib/wps.py\u001b[0m in \u001b[0;36mreadFromUrl\u001b[0;34m(self, url, data, method, username, password, headers, verify, cert)\u001b[0m\n\u001b[1;32m    551\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m         return self._readFromUrl(url, data, method, username=username, password=password,\n\u001b[0;32m--> 553\u001b[0;31m                                  headers=headers, verify=verify, cert=cert)\n\u001b[0m\u001b[1;32m    554\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/src/OWSLib/owslib/wps.py\u001b[0m in \u001b[0;36m_readFromUrl\u001b[0;34m(self, url, data, method, username, password, headers, verify, cert)\u001b[0m\n\u001b[1;32m    463\u001b[0m             u = openURL(url, data, method='Post',\n\u001b[1;32m    464\u001b[0m                         \u001b[0musername\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0musername\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpassword\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 465\u001b[0;31m                         headers=headers, verify=verify, cert=cert)\n\u001b[0m\u001b[1;32m    466\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0metree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromstring\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    467\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/src/OWSLib/owslib/util.py\u001b[0m in \u001b[0;36mopenURL\u001b[0;34m(url_base, data, method, cookies, username, password, timeout, headers, verify, cert)\u001b[0m\n\u001b[1;32m    188\u001b[0m                            \u001b[0mverify\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverify\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m                            \u001b[0mcert\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcert\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m                            **rkwargs)\n\u001b[0m\u001b[1;32m    191\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus_code\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m400\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m401\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0;31m# cases, and look like a memory leak in others.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    510\u001b[0m         }\n\u001b[1;32m    511\u001b[0m         \u001b[0msend_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 512\u001b[0;31m         \u001b[0mresp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msend_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    513\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    620\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    621\u001b[0m         \u001b[0;31m# Send the request\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 622\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madapter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    624\u001b[0m         \u001b[0;31m# Total elapsed time of the request (approximately)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/birdy/lib/python3.6/site-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    524\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    525\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mReadTimeoutError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 526\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mReadTimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    527\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    528\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mReadTimeout\u001b[0m: HTTPSConnectionPool(host='boreas.ouranos.ca', port=443): Read timed out. (read timeout=30)"
     ]
    }
   ],
   "source": [
    "# This could take a some time\n",
    "execution = wpsFP.execute(identifier=proc_name, inputs=myinputs)\n",
    "print(execution.status)\n",
    "print(execution.processOutputs[-1].reference)\n",
    "print(execution.statusLocation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['https://pavics.ouranos.ca:443/wpsoutputs/flyingpigeon/tmpd2YbsA/nrcan_canada_daily_tasmax_2008_subset.nc', 'https://pavics.ouranos.ca:443/wpsoutputs/flyingpigeon/tmpd2YbsA/nrcan_canada_daily_tasmax_2009_subset.nc', 'https://pavics.ouranos.ca:443/wpsoutputs/flyingpigeon/tmpd2YbsA/nrcan_canada_daily_tasmax_2010_subset.nc']\n"
     ]
    }
   ],
   "source": [
    "ref = parseStatus(execution)\n",
    "r = requests.get(ref)\n",
    "\n",
    "list_subset = r.json()\n",
    "print(list_subset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4 subset completed\n",
    "Before moving on - Let's download one file to see how the subset worked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "./output/nrcan_canada_daily_tasmax_2008_subset.nc\n"
     ]
    }
   ],
   "source": [
    "r = requests.get(list_subset[0])\n",
    "outfile = './output/' +list_subset[0].split('/')[-1] \n",
    "print(outfile)\n",
    "with open(outfile, 'wb') as f:\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.contour.QuadContourSet at 0x7f2da270f710>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nc1 = Dataset(outfile)\n",
    "tasmax = nc1['tasmax'][:]\n",
    "lon = nc1.variables['lon'][:]\n",
    "lat = nc1.variables['lat'][:]\n",
    "plt.contourf(lon,lat,tasmax.mean(axis=0),20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2da2618eb8>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(tasmax[:,10,10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Looks good - the St-Lawrence valley is visible (if you are familiar with Quebec geography)\n",
    "##### End step 2 - Successful spatial subsetting of datasets\t\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3 - temporal concatenation using 'ncmerge'\n",
    "* 'ncmerge' can also be accessed in Flyingpigeon \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### As always : start by describing the process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inputs : resource  :  NetCDF files, can be OPEnDAP urls.\n",
      "outputs : output  :  Temporally merged NetCDF files.\n"
     ]
    }
   ],
   "source": [
    "proc_name = 'ncmerge'\n",
    "process = wpsFP.describeprocess(identifier=proc_name) # get process info\n",
    "for i in process.dataInputs:\n",
    "    print('inputs :', i.identifier, ' : ', i.abstract)\n",
    "for i in process.processOutputs:\n",
    "    print('outputs :', i.identifier, ' : ', i.abstract)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.1 Question : Are my subsetted urls (list_subset) opendap urls?\n",
    "* Simple test : follow one of the links\n",
    "* If you start to download : Not OpenDAP\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://pavics.ouranos.ca:443/wpsoutputs/flyingpigeon/tmpd2YbsA/nrcan_canada_daily_tasmax_2008_subset.nc\n"
     ]
    }
   ],
   "source": [
    "#Check if opendap\n",
    "print(list_subset[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "##### 3.2 Test conclusion : The subsetted .nc urls are NOT OpenDAP\n",
    "* Future development - we would like to get both OpenDap and direct links as outputs from PAVICS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.3 We can still use them but resouce inputs must be sent using ComplexDataInput()\n",
    "* Create inputs list and execute WPS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('resource', <owslib.wps.ComplexDataInput object at 0x7f2da2294278>), ('resource', <owslib.wps.ComplexDataInput object at 0x7f2da2294240>), ('resource', <owslib.wps.ComplexDataInput object at 0x7f2da2294470>)]\n"
     ]
    }
   ],
   "source": [
    "proc_name = 'ncmerge'\n",
    "\n",
    "myinputs = []\n",
    "for l in list_subset:\n",
    "    #print(l)\n",
    "    myinputs.append(('resource', ComplexDataInput(l)))\n",
    "print(myinputs)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProcessSucceeded\n"
     ]
    }
   ],
   "source": [
    "execution = wpsFP.execute(identifier=proc_name, inputs=myinputs)\n",
    "print(execution.status)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.3 Get WPS output location and download merged .nc file \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is the url to the merged file : https://pavics.ouranos.ca:443/wpsoutputs/flyingpigeon/722bf490-bba5-11e8-9c30-0242ac12000b/nrcan_canada_daily_tasmax_2008_subset_merged_4feNMY.nc\n",
      "./output/nrcan_canada_daily_tasmax_2008_subset_merged_4feNMY.nc\n"
     ]
    }
   ],
   "source": [
    "merged_nc=parseStatus(execution)\n",
    "\n",
    "r = requests.get(merged_nc)\n",
    "print('This is the url to the merged file :',merged_nc)\n",
    "outfile_merge = './output/' + merged_nc.split('/')[-1] \n",
    "print(outfile_merge)\n",
    "with open(outfile_merge, 'wb') as f:\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.4 Make a plot : we should have 3 years of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2da25970f0>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nxX0BCOorsiBGYNwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ncOut = Dataset(outfile_merge)\n",
    "#print(ncOut)\n",
    "\n",
    "tasmax_merge = ncOut.variables['tasmax'][:]\n",
    "plt.plot(tasmax_merge[:,10,10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### End step 3 - Successful temporal merge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 4 - Calculate monthly min, mean and max  \n",
    "1. Use CDO operators via Hummingbird - A different WPS suite\n",
    "\n",
    "##### 4.1 Let's start with connecting to Hummingbird\n",
    "##### As always : start by describing the process\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hummingbird 0.5_dev\n"
     ]
    }
   ],
   "source": [
    "wpsURL = 'https://boreas.ouranos.ca/twitcher/ows/proxy/hummingbird/wps'\n",
    "wpsHM = WebProcessingService(url=wpsURL)\n",
    "print(wpsHM.identification.title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.2 List WPS services available in Hummingbird\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ncdump \t : Run ncdump to retrieve NetCDF header metadata. \n",
      "spotchecker \t : Checks a single uploaded or remote dataset against a variety of compliance standards. The dataset is either in the NetCDF format or a remote OpenDAP resource. Available compliance standards are the Climate and Forecast conventions (CF) and project specific rules for CMIP6 and CORDEX. \n",
      "cchecker \t : Runs the IOOS Compliance Checker tool to check datasets against compliance standards. Each compliance standard is executed by a Check Suite, which functions similar to a Python standard Unit Test. A Check Suite runs one or more checks against a dataset, returning a list of Results which are then aggregated into a summary. Development and maintenance for the compliance checker is done by the Integrated Ocean Observing System (IOOS). \n",
      "cfchecker \t : The NetCDF Climate Forcast Conventions compliance checker by CEDA. This process allows you to run the compliance checker to check that the contents of a NetCDF file comply with the Climate and Forecasts (CF) Metadata Convention. The CF-checker was developed at the Hadley Centre for Climate Prediction and Research, UK Met Office by Rosalyn Hatcher. This work was supported by PRISM (PRogramme for Integrated Earth System Modelling). Development and maintenance for the CF-checker has now been taken over by the NCAS Computational Modelling Services (NCAS-CMS). If you have suggestions for improvement then please contact Rosalyn Hatcher at NCAS-CMS (r.s.hatcher@reading.ac.uk). \n",
      "cmor_checker \t : Calls the CMIP6 cmor checker to verify CMIP6 compliance.CMIP6 CMOR checker will verify that all attributes in the input file are present and conform to CMIP6 for publication into ESGF. \n",
      "qa_cfchecker \t : The NetCDF Climate Forcast Conventions compliance checker by DKRZ. This process allows you to run the compliance checker to check that the contents of a NetCDF file comply with the Climate and Forecasts (CF) Metadata Convention. The CF Conformance checker applies to conventions 1.4 -1.7draft. Development and maintenance for the CF-checker is done by the German Climate Computing Centre (DKRZ). If you have suggestions for improvement then please contact Heinz-Dieter Hollweg at DKRZ (hollweg@dkrz.de). \n",
      "qa_checker \t : The Quality Assurance checker QA-DKRZ checks conformance of meta-data of climate simulations given in NetCDF format with conventions and rules of climate model projects. At present, checking of CF Conventions, CMIP5, and CORDEX is supported. Development and maintenance for the QA checker is done by the German Climate Computing Centre (DKRZ). If you have suggestions for improvement then please contact Heinz-Dieter Hollweg at DKRZ (hollweg@dkrz.de). \n",
      "cdo_sinfo \t : Runs CDO to retrieve NetCDF metadata information. Calls the sinfo operator of CDO (Climate Data Operator) on a NetCDF file and returns a document with metadata information. \n",
      "cdo_operation \t : Calls CDO operations like monmax on a NetCDF file. \n",
      "cdo_copy \t : Calls CDO to copy or concatenate datasets. All input datasets need to have the same structure with the same variables on different timesteps. \n",
      "cdo_bbox \t : Runs CDO to clip a bounding-box from a NetCDF file. Calls the CDO (Climate Data Operators) sellonlatbox operator with a bounding-box and returns the resulting NetCDF file. \n",
      "cdo_indices \t : Calculates climate indices like summer days using CDO. Calls the Climate Data Operators (CDO) tool with a single dataset (NetCDF, OpenDAP) provided and uses the chosen operator to calculate climate indices written to a NetCDF file. \n",
      "ensembles \t : Calling cdo to calculate ensembles operations. \n",
      "cdo_inter_mpi \t : CDO Remapping of NetCDF File(s) with multiprocessing \n"
     ]
    }
   ],
   "source": [
    "for process in wpsHM.processes:\n",
    "    print ('%s \\t : %s ' %(process.identifier, process.abstract))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.3 We want to use 'CDO operation'\n",
    "* As always we start by ...... Describing the process!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CDO Operation  :  Calls CDO operations like monmax on a NetCDF file. \n",
      "\n",
      "inputs : dataset  :  You may provide a URL or upload a NetCDF file.\n",
      "inputs : dataset_opendap  :  Or provide a remote OpenDAP data URL, for example: http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/ncep.reanalysis2.dailyavgs/surface/mslp.2016.nc\n",
      "inputs : operator  :  Choose a CDO Operator.                          See the CDO documentation to lookup a description of the operators.\n",
      "outputs : output  :  NetCDF Output generated by CDO.\n"
     ]
    }
   ],
   "source": [
    "proc_name = 'cdo_operation'\n",
    "process = wpsHM.describeprocess(proc_name) # get process info\n",
    "print(process.title, ' : ',process.abstract,'\\n')\n",
    "for i in process.dataInputs:\n",
    "    print('inputs :', i.identifier, ' : ', i.abstract)\n",
    "for i in process.processOutputs:\n",
    "    print('outputs :', i.identifier, ' : ', i.abstract)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.4 Create inputs & execute WPS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProcessSucceeded\n",
      "https://pavics.ouranos.ca:443/wpsoutputs/hummingbird/91734d30-bba5-11e8-b808-0242ac12000d.xml\n"
     ]
    }
   ],
   "source": [
    "myinputs = []\n",
    "myinputs.append(('dataset',ComplexDataInput(merged_nc)))\n",
    "myinputs.append(('operator','monmax'))\n",
    "\n",
    "execution = wpsHM.execute(identifier=proc_name,inputs=myinputs )\n",
    "print(execution.status)\n",
    "print(execution.statusLocation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.5 Download the output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "monmax_nc = parseStatus(execution)\n",
    "print(monmax_nc)\n",
    "r = requests.get(monmax_nc)\n",
    "\n",
    "outfile_monmax = './output/' + monmax_nc.split('/')[-1] \n",
    "print(outfile_monmax)\n",
    "with open(outfile_monmax, 'wb') as f:\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Monthly min\n",
    "myinputs = []\n",
    "myinputs.append(('dataset',ComplexDataInput(merged_nc)))\n",
    "myinputs.append(('operator','monmin'))\n",
    "\n",
    "execution = wpsHM.execute(identifier=proc_name,inputs=myinputs )\n",
    "print(execution.status)\n",
    "print(execution.statusLocation)\n",
    "\n",
    "monmin_nc = parseStatus(execution)\n",
    "print(monmin_nc)\n",
    "r = requests.get(monmin_nc)\n",
    "\n",
    "outfile_monmin = './output/' + monmin_nc.split('/')[-1] \n",
    "print(outfile_monmin)\n",
    "with open(outfile_monmin, 'wb') as f:\n",
    "    f.write(r.content)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ProcessSucceeded\n",
      "https://pavics.ouranos.ca:443/wpsoutputs/hummingbird/43d57c78-bba6-11e8-8b91-0242ac12000d.xml\n",
      "https://pavics.ouranos.ca:443/wpsoutputs/hummingbird/43d57c78-bba6-11e8-8b91-0242ac12000d/cdo_monmean_RdzVXI.nc\n",
      "./output/cdo_monmean_RdzVXI.nc\n"
     ]
    }
   ],
   "source": [
    "# Monthly mean\n",
    "myinputs = []\n",
    "myinputs.append(('dataset',ComplexDataInput(merged_nc)))\n",
    "myinputs.append(('operator','monmean'))\n",
    "\n",
    "execution = wpsHM.execute(identifier=proc_name,inputs=myinputs )\n",
    "print(execution.status)\n",
    "print(execution.statusLocation)\n",
    "\n",
    "monmean_nc = parseStatus(execution)\n",
    "print(monmean_nc)\n",
    "r = requests.get(monmean_nc)\n",
    "\n",
    "outfile_monmean = './output/' + monmean_nc.split('/')[-1] \n",
    "print(outfile_monmean)\n",
    "with open(outfile_monmean, 'wb') as f:\n",
    "    f.write(r.content)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.6 Plot the results and compare with daily data series\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f2da2075b38>]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ncMerge = Dataset(outfile_merge)\n",
    "ncMax = Dataset(outfile_monmax)\n",
    "ncMin = Dataset(outfile_monmin)\n",
    "ncMean = Dataset(outfile_monmean)\n",
    "\n",
    "tasmax_merge = ncMerge['tasmax'][:]\n",
    "time_merge = ncMerge['time'][:]\n",
    "plt.plot(time_merge,tasmax_merge[:,10,10])\n",
    "\n",
    "tasmax_monmax = ncMax['tasmax'][:]\n",
    "time_max = ncMax['time'][:]\n",
    "plt.plot(time_max,tasmax_monmax[:,10,10],color='r')\n",
    "\n",
    "tasmax_monmin = ncMin['tasmax'][:]\n",
    "time_min = ncMin['time'][:]\n",
    "plt.plot(time_min,tasmax_monmin[:,10,10],color='r')\n",
    "\n",
    "tasmax_monmean = ncMean['tasmax'][:]\n",
    "time_mean = ncMean['time'][:]\n",
    "plt.plot(time_mean,tasmax_monmean[:,10,10],color='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
